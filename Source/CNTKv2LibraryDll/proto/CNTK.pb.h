// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: CNTK.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_CNTK_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_CNTK_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3014000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3014000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/map.h>  // IWYU pragma: export
#include <google/protobuf/map_entry.h>
#include <google/protobuf/map_field_inl.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_CNTK_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_CNTK_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[11]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_CNTK_2eproto;
namespace CNTK {
namespace proto {
class Axis;
class AxisDefaultTypeInternal;
extern AxisDefaultTypeInternal _Axis_default_instance_;
class Dictionary;
class DictionaryDefaultTypeInternal;
extern DictionaryDefaultTypeInternal _Dictionary_default_instance_;
class DictionaryValue;
class DictionaryValueDefaultTypeInternal;
extern DictionaryValueDefaultTypeInternal _DictionaryValue_default_instance_;
class Dictionary_DataEntry_DoNotUse;
class Dictionary_DataEntry_DoNotUseDefaultTypeInternal;
extern Dictionary_DataEntry_DoNotUseDefaultTypeInternal _Dictionary_DataEntry_DoNotUse_default_instance_;
class NDArrayView;
class NDArrayViewDefaultTypeInternal;
extern NDArrayViewDefaultTypeInternal _NDArrayView_default_instance_;
class NDArrayView_BytesValue;
class NDArrayView_BytesValueDefaultTypeInternal;
extern NDArrayView_BytesValueDefaultTypeInternal _NDArrayView_BytesValue_default_instance_;
class NDArrayView_DoubleValues;
class NDArrayView_DoubleValuesDefaultTypeInternal;
extern NDArrayView_DoubleValuesDefaultTypeInternal _NDArrayView_DoubleValues_default_instance_;
class NDArrayView_FloatValues;
class NDArrayView_FloatValuesDefaultTypeInternal;
extern NDArrayView_FloatValuesDefaultTypeInternal _NDArrayView_FloatValues_default_instance_;
class NDArrayView_IntValues;
class NDArrayView_IntValuesDefaultTypeInternal;
extern NDArrayView_IntValuesDefaultTypeInternal _NDArrayView_IntValues_default_instance_;
class NDShape;
class NDShapeDefaultTypeInternal;
extern NDShapeDefaultTypeInternal _NDShape_default_instance_;
class Vector;
class VectorDefaultTypeInternal;
extern VectorDefaultTypeInternal _Vector_default_instance_;
}  // namespace proto
}  // namespace CNTK
PROTOBUF_NAMESPACE_OPEN
template<> ::CNTK::proto::Axis* Arena::CreateMaybeMessage<::CNTK::proto::Axis>(Arena*);
template<> ::CNTK::proto::Dictionary* Arena::CreateMaybeMessage<::CNTK::proto::Dictionary>(Arena*);
template<> ::CNTK::proto::DictionaryValue* Arena::CreateMaybeMessage<::CNTK::proto::DictionaryValue>(Arena*);
template<> ::CNTK::proto::Dictionary_DataEntry_DoNotUse* Arena::CreateMaybeMessage<::CNTK::proto::Dictionary_DataEntry_DoNotUse>(Arena*);
template<> ::CNTK::proto::NDArrayView* Arena::CreateMaybeMessage<::CNTK::proto::NDArrayView>(Arena*);
template<> ::CNTK::proto::NDArrayView_BytesValue* Arena::CreateMaybeMessage<::CNTK::proto::NDArrayView_BytesValue>(Arena*);
template<> ::CNTK::proto::NDArrayView_DoubleValues* Arena::CreateMaybeMessage<::CNTK::proto::NDArrayView_DoubleValues>(Arena*);
template<> ::CNTK::proto::NDArrayView_FloatValues* Arena::CreateMaybeMessage<::CNTK::proto::NDArrayView_FloatValues>(Arena*);
template<> ::CNTK::proto::NDArrayView_IntValues* Arena::CreateMaybeMessage<::CNTK::proto::NDArrayView_IntValues>(Arena*);
template<> ::CNTK::proto::NDShape* Arena::CreateMaybeMessage<::CNTK::proto::NDShape>(Arena*);
template<> ::CNTK::proto::Vector* Arena::CreateMaybeMessage<::CNTK::proto::Vector>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace CNTK {
namespace proto {

enum NDArrayView_DataType : int {
  NDArrayView_DataType_Unknown = 0,
  NDArrayView_DataType_Float = 1,
  NDArrayView_DataType_Double = 2,
  NDArrayView_DataType_Float16 = 4,
  NDArrayView_DataType_Int8 = 5,
  NDArrayView_DataType_Int16 = 6,
  NDArrayView_DataType_NDArrayView_DataType_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  NDArrayView_DataType_NDArrayView_DataType_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool NDArrayView_DataType_IsValid(int value);
constexpr NDArrayView_DataType NDArrayView_DataType_DataType_MIN = NDArrayView_DataType_Unknown;
constexpr NDArrayView_DataType NDArrayView_DataType_DataType_MAX = NDArrayView_DataType_Int16;
constexpr int NDArrayView_DataType_DataType_ARRAYSIZE = NDArrayView_DataType_DataType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* NDArrayView_DataType_descriptor();
template<typename T>
inline const std::string& NDArrayView_DataType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, NDArrayView_DataType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function NDArrayView_DataType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    NDArrayView_DataType_descriptor(), enum_t_value);
}
inline bool NDArrayView_DataType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, NDArrayView_DataType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<NDArrayView_DataType>(
    NDArrayView_DataType_descriptor(), name, value);
}
enum NDArrayView_StorageFormat : int {
  NDArrayView_StorageFormat_Dense = 0,
  NDArrayView_StorageFormat_SparseCSC = 1,
  NDArrayView_StorageFormat_SparseBlockCol = 2,
  NDArrayView_StorageFormat_NDArrayView_StorageFormat_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  NDArrayView_StorageFormat_NDArrayView_StorageFormat_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool NDArrayView_StorageFormat_IsValid(int value);
constexpr NDArrayView_StorageFormat NDArrayView_StorageFormat_StorageFormat_MIN = NDArrayView_StorageFormat_Dense;
constexpr NDArrayView_StorageFormat NDArrayView_StorageFormat_StorageFormat_MAX = NDArrayView_StorageFormat_SparseBlockCol;
constexpr int NDArrayView_StorageFormat_StorageFormat_ARRAYSIZE = NDArrayView_StorageFormat_StorageFormat_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* NDArrayView_StorageFormat_descriptor();
template<typename T>
inline const std::string& NDArrayView_StorageFormat_Name(T enum_t_value) {
  static_assert(::std::is_same<T, NDArrayView_StorageFormat>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function NDArrayView_StorageFormat_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    NDArrayView_StorageFormat_descriptor(), enum_t_value);
}
inline bool NDArrayView_StorageFormat_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, NDArrayView_StorageFormat* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<NDArrayView_StorageFormat>(
    NDArrayView_StorageFormat_descriptor(), name, value);
}
enum DictionaryValue_Type : int {
  DictionaryValue_Type_None = 0,
  DictionaryValue_Type_Bool = 1,
  DictionaryValue_Type_Int = 2,
  DictionaryValue_Type_SizeT = 3,
  DictionaryValue_Type_Float = 4,
  DictionaryValue_Type_Double = 5,
  DictionaryValue_Type_String = 6,
  DictionaryValue_Type_NDShape = 7,
  DictionaryValue_Type_Axis = 8,
  DictionaryValue_Type_Vector = 9,
  DictionaryValue_Type_Dictionary = 10,
  DictionaryValue_Type_NDArrayView = 11,
  DictionaryValue_Type_DictionaryValue_Type_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  DictionaryValue_Type_DictionaryValue_Type_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool DictionaryValue_Type_IsValid(int value);
constexpr DictionaryValue_Type DictionaryValue_Type_Type_MIN = DictionaryValue_Type_None;
constexpr DictionaryValue_Type DictionaryValue_Type_Type_MAX = DictionaryValue_Type_NDArrayView;
constexpr int DictionaryValue_Type_Type_ARRAYSIZE = DictionaryValue_Type_Type_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* DictionaryValue_Type_descriptor();
template<typename T>
inline const std::string& DictionaryValue_Type_Name(T enum_t_value) {
  static_assert(::std::is_same<T, DictionaryValue_Type>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function DictionaryValue_Type_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    DictionaryValue_Type_descriptor(), enum_t_value);
}
inline bool DictionaryValue_Type_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, DictionaryValue_Type* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<DictionaryValue_Type>(
    DictionaryValue_Type_descriptor(), name, value);
}
// ===================================================================

class NDShape PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CNTK.proto.NDShape) */ {
 public:
  inline NDShape() : NDShape(nullptr) {}
  virtual ~NDShape();

  NDShape(const NDShape& from);
  NDShape(NDShape&& from) noexcept
    : NDShape() {
    *this = ::std::move(from);
  }

  inline NDShape& operator=(const NDShape& from) {
    CopyFrom(from);
    return *this;
  }
  inline NDShape& operator=(NDShape&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const NDShape& default_instance();

  static inline const NDShape* internal_default_instance() {
    return reinterpret_cast<const NDShape*>(
               &_NDShape_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(NDShape& a, NDShape& b) {
    a.Swap(&b);
  }
  inline void Swap(NDShape* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(NDShape* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline NDShape* New() const final {
    return CreateMaybeMessage<NDShape>(nullptr);
  }

  NDShape* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<NDShape>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const NDShape& from);
  void MergeFrom(const NDShape& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(NDShape* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CNTK.proto.NDShape";
  }
  protected:
  explicit NDShape(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_CNTK_2eproto);
    return ::descriptor_table_CNTK_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kShapeDimFieldNumber = 1,
  };
  // repeated uint64 shape_dim = 1 [packed = true];
  int shape_dim_size() const;
  private:
  int _internal_shape_dim_size() const;
  public:
  void clear_shape_dim();
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_shape_dim(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >&
      _internal_shape_dim() const;
  void _internal_add_shape_dim(::PROTOBUF_NAMESPACE_ID::uint64 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >*
      _internal_mutable_shape_dim();
  public:
  ::PROTOBUF_NAMESPACE_ID::uint64 shape_dim(int index) const;
  void set_shape_dim(int index, ::PROTOBUF_NAMESPACE_ID::uint64 value);
  void add_shape_dim(::PROTOBUF_NAMESPACE_ID::uint64 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >&
      shape_dim() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >*
      mutable_shape_dim();

  // @@protoc_insertion_point(class_scope:CNTK.proto.NDShape)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 > shape_dim_;
  mutable std::atomic<int> _shape_dim_cached_byte_size_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_CNTK_2eproto;
};
// -------------------------------------------------------------------

class Axis PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CNTK.proto.Axis) */ {
 public:
  inline Axis() : Axis(nullptr) {}
  virtual ~Axis();

  Axis(const Axis& from);
  Axis(Axis&& from) noexcept
    : Axis() {
    *this = ::std::move(from);
  }

  inline Axis& operator=(const Axis& from) {
    CopyFrom(from);
    return *this;
  }
  inline Axis& operator=(Axis&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Axis& default_instance();

  static inline const Axis* internal_default_instance() {
    return reinterpret_cast<const Axis*>(
               &_Axis_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(Axis& a, Axis& b) {
    a.Swap(&b);
  }
  inline void Swap(Axis* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Axis* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Axis* New() const final {
    return CreateMaybeMessage<Axis>(nullptr);
  }

  Axis* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Axis>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Axis& from);
  void MergeFrom(const Axis& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Axis* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CNTK.proto.Axis";
  }
  protected:
  explicit Axis(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_CNTK_2eproto);
    return ::descriptor_table_CNTK_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 2,
    kStaticAxisIdxFieldNumber = 1,
    kIsOrderedDynamicAxisFieldNumber = 3,
  };
  // string name = 2;
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // int32 static_axis_idx = 1;
  void clear_static_axis_idx();
  ::PROTOBUF_NAMESPACE_ID::int32 static_axis_idx() const;
  void set_static_axis_idx(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_static_axis_idx() const;
  void _internal_set_static_axis_idx(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // bool is_ordered_dynamic_axis = 3;
  void clear_is_ordered_dynamic_axis();
  bool is_ordered_dynamic_axis() const;
  void set_is_ordered_dynamic_axis(bool value);
  private:
  bool _internal_is_ordered_dynamic_axis() const;
  void _internal_set_is_ordered_dynamic_axis(bool value);
  public:

  // @@protoc_insertion_point(class_scope:CNTK.proto.Axis)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::PROTOBUF_NAMESPACE_ID::int32 static_axis_idx_;
  bool is_ordered_dynamic_axis_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_CNTK_2eproto;
};
// -------------------------------------------------------------------

class NDArrayView_FloatValues PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CNTK.proto.NDArrayView.FloatValues) */ {
 public:
  inline NDArrayView_FloatValues() : NDArrayView_FloatValues(nullptr) {}
  virtual ~NDArrayView_FloatValues();

  NDArrayView_FloatValues(const NDArrayView_FloatValues& from);
  NDArrayView_FloatValues(NDArrayView_FloatValues&& from) noexcept
    : NDArrayView_FloatValues() {
    *this = ::std::move(from);
  }

  inline NDArrayView_FloatValues& operator=(const NDArrayView_FloatValues& from) {
    CopyFrom(from);
    return *this;
  }
  inline NDArrayView_FloatValues& operator=(NDArrayView_FloatValues&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const NDArrayView_FloatValues& default_instance();

  static inline const NDArrayView_FloatValues* internal_default_instance() {
    return reinterpret_cast<const NDArrayView_FloatValues*>(
               &_NDArrayView_FloatValues_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(NDArrayView_FloatValues& a, NDArrayView_FloatValues& b) {
    a.Swap(&b);
  }
  inline void Swap(NDArrayView_FloatValues* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(NDArrayView_FloatValues* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline NDArrayView_FloatValues* New() const final {
    return CreateMaybeMessage<NDArrayView_FloatValues>(nullptr);
  }

  NDArrayView_FloatValues* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<NDArrayView_FloatValues>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const NDArrayView_FloatValues& from);
  void MergeFrom(const NDArrayView_FloatValues& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(NDArrayView_FloatValues* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CNTK.proto.NDArrayView.FloatValues";
  }
  protected:
  explicit NDArrayView_FloatValues(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_CNTK_2eproto);
    return ::descriptor_table_CNTK_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kValueFieldNumber = 1,
  };
  // repeated float value = 1 [packed = true];
  int value_size() const;
  private:
  int _internal_value_size() const;
  public:
  void clear_value();
  private:
  float _internal_value(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      _internal_value() const;
  void _internal_add_value(float value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      _internal_mutable_value();
  public:
  float value(int index) const;
  void set_value(int index, float value);
  void add_value(float value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      value() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      mutable_value();

  // @@protoc_insertion_point(class_scope:CNTK.proto.NDArrayView.FloatValues)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float > value_;
  mutable std::atomic<int> _value_cached_byte_size_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_CNTK_2eproto;
};
// -------------------------------------------------------------------

class NDArrayView_DoubleValues PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CNTK.proto.NDArrayView.DoubleValues) */ {
 public:
  inline NDArrayView_DoubleValues() : NDArrayView_DoubleValues(nullptr) {}
  virtual ~NDArrayView_DoubleValues();

  NDArrayView_DoubleValues(const NDArrayView_DoubleValues& from);
  NDArrayView_DoubleValues(NDArrayView_DoubleValues&& from) noexcept
    : NDArrayView_DoubleValues() {
    *this = ::std::move(from);
  }

  inline NDArrayView_DoubleValues& operator=(const NDArrayView_DoubleValues& from) {
    CopyFrom(from);
    return *this;
  }
  inline NDArrayView_DoubleValues& operator=(NDArrayView_DoubleValues&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const NDArrayView_DoubleValues& default_instance();

  static inline const NDArrayView_DoubleValues* internal_default_instance() {
    return reinterpret_cast<const NDArrayView_DoubleValues*>(
               &_NDArrayView_DoubleValues_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(NDArrayView_DoubleValues& a, NDArrayView_DoubleValues& b) {
    a.Swap(&b);
  }
  inline void Swap(NDArrayView_DoubleValues* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(NDArrayView_DoubleValues* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline NDArrayView_DoubleValues* New() const final {
    return CreateMaybeMessage<NDArrayView_DoubleValues>(nullptr);
  }

  NDArrayView_DoubleValues* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<NDArrayView_DoubleValues>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const NDArrayView_DoubleValues& from);
  void MergeFrom(const NDArrayView_DoubleValues& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(NDArrayView_DoubleValues* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CNTK.proto.NDArrayView.DoubleValues";
  }
  protected:
  explicit NDArrayView_DoubleValues(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_CNTK_2eproto);
    return ::descriptor_table_CNTK_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kValueFieldNumber = 1,
  };
  // repeated double value = 1 [packed = true];
  int value_size() const;
  private:
  int _internal_value_size() const;
  public:
  void clear_value();
  private:
  double _internal_value(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
      _internal_value() const;
  void _internal_add_value(double value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
      _internal_mutable_value();
  public:
  double value(int index) const;
  void set_value(int index, double value);
  void add_value(double value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
      value() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
      mutable_value();

  // @@protoc_insertion_point(class_scope:CNTK.proto.NDArrayView.DoubleValues)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< double > value_;
  mutable std::atomic<int> _value_cached_byte_size_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_CNTK_2eproto;
};
// -------------------------------------------------------------------

class NDArrayView_BytesValue PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CNTK.proto.NDArrayView.BytesValue) */ {
 public:
  inline NDArrayView_BytesValue() : NDArrayView_BytesValue(nullptr) {}
  virtual ~NDArrayView_BytesValue();

  NDArrayView_BytesValue(const NDArrayView_BytesValue& from);
  NDArrayView_BytesValue(NDArrayView_BytesValue&& from) noexcept
    : NDArrayView_BytesValue() {
    *this = ::std::move(from);
  }

  inline NDArrayView_BytesValue& operator=(const NDArrayView_BytesValue& from) {
    CopyFrom(from);
    return *this;
  }
  inline NDArrayView_BytesValue& operator=(NDArrayView_BytesValue&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const NDArrayView_BytesValue& default_instance();

  static inline const NDArrayView_BytesValue* internal_default_instance() {
    return reinterpret_cast<const NDArrayView_BytesValue*>(
               &_NDArrayView_BytesValue_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(NDArrayView_BytesValue& a, NDArrayView_BytesValue& b) {
    a.Swap(&b);
  }
  inline void Swap(NDArrayView_BytesValue* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(NDArrayView_BytesValue* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline NDArrayView_BytesValue* New() const final {
    return CreateMaybeMessage<NDArrayView_BytesValue>(nullptr);
  }

  NDArrayView_BytesValue* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<NDArrayView_BytesValue>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const NDArrayView_BytesValue& from);
  void MergeFrom(const NDArrayView_BytesValue& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(NDArrayView_BytesValue* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CNTK.proto.NDArrayView.BytesValue";
  }
  protected:
  explicit NDArrayView_BytesValue(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_CNTK_2eproto);
    return ::descriptor_table_CNTK_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kValueFieldNumber = 1,
  };
  // bytes value = 1;
  void clear_value();
  const std::string& value() const;
  void set_value(const std::string& value);
  void set_value(std::string&& value);
  void set_value(const char* value);
  void set_value(const void* value, size_t size);
  std::string* mutable_value();
  std::string* release_value();
  void set_allocated_value(std::string* value);
  private:
  const std::string& _internal_value() const;
  void _internal_set_value(const std::string& value);
  std::string* _internal_mutable_value();
  public:

  // @@protoc_insertion_point(class_scope:CNTK.proto.NDArrayView.BytesValue)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr value_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_CNTK_2eproto;
};
// -------------------------------------------------------------------

class NDArrayView_IntValues PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CNTK.proto.NDArrayView.IntValues) */ {
 public:
  inline NDArrayView_IntValues() : NDArrayView_IntValues(nullptr) {}
  virtual ~NDArrayView_IntValues();

  NDArrayView_IntValues(const NDArrayView_IntValues& from);
  NDArrayView_IntValues(NDArrayView_IntValues&& from) noexcept
    : NDArrayView_IntValues() {
    *this = ::std::move(from);
  }

  inline NDArrayView_IntValues& operator=(const NDArrayView_IntValues& from) {
    CopyFrom(from);
    return *this;
  }
  inline NDArrayView_IntValues& operator=(NDArrayView_IntValues&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const NDArrayView_IntValues& default_instance();

  static inline const NDArrayView_IntValues* internal_default_instance() {
    return reinterpret_cast<const NDArrayView_IntValues*>(
               &_NDArrayView_IntValues_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(NDArrayView_IntValues& a, NDArrayView_IntValues& b) {
    a.Swap(&b);
  }
  inline void Swap(NDArrayView_IntValues* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(NDArrayView_IntValues* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline NDArrayView_IntValues* New() const final {
    return CreateMaybeMessage<NDArrayView_IntValues>(nullptr);
  }

  NDArrayView_IntValues* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<NDArrayView_IntValues>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const NDArrayView_IntValues& from);
  void MergeFrom(const NDArrayView_IntValues& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(NDArrayView_IntValues* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CNTK.proto.NDArrayView.IntValues";
  }
  protected:
  explicit NDArrayView_IntValues(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_CNTK_2eproto);
    return ::descriptor_table_CNTK_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kValueFieldNumber = 1,
  };
  // repeated sint32 value = 1 [packed = true];
  int value_size() const;
  private:
  int _internal_value_size() const;
  public:
  void clear_value();
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_value(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
      _internal_value() const;
  void _internal_add_value(::PROTOBUF_NAMESPACE_ID::int32 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
      _internal_mutable_value();
  public:
  ::PROTOBUF_NAMESPACE_ID::int32 value(int index) const;
  void set_value(int index, ::PROTOBUF_NAMESPACE_ID::int32 value);
  void add_value(::PROTOBUF_NAMESPACE_ID::int32 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
      value() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
      mutable_value();

  // @@protoc_insertion_point(class_scope:CNTK.proto.NDArrayView.IntValues)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 > value_;
  mutable std::atomic<int> _value_cached_byte_size_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_CNTK_2eproto;
};
// -------------------------------------------------------------------

class NDArrayView PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CNTK.proto.NDArrayView) */ {
 public:
  inline NDArrayView() : NDArrayView(nullptr) {}
  virtual ~NDArrayView();

  NDArrayView(const NDArrayView& from);
  NDArrayView(NDArrayView&& from) noexcept
    : NDArrayView() {
    *this = ::std::move(from);
  }

  inline NDArrayView& operator=(const NDArrayView& from) {
    CopyFrom(from);
    return *this;
  }
  inline NDArrayView& operator=(NDArrayView&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const NDArrayView& default_instance();

  enum ValuesCase {
    kFloatValues = 4,
    kDoubleValues = 5,
    kBytesValue = 6,
    kSint32Values = 7,
    VALUES_NOT_SET = 0,
  };

  static inline const NDArrayView* internal_default_instance() {
    return reinterpret_cast<const NDArrayView*>(
               &_NDArrayView_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(NDArrayView& a, NDArrayView& b) {
    a.Swap(&b);
  }
  inline void Swap(NDArrayView* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(NDArrayView* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline NDArrayView* New() const final {
    return CreateMaybeMessage<NDArrayView>(nullptr);
  }

  NDArrayView* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<NDArrayView>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const NDArrayView& from);
  void MergeFrom(const NDArrayView& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(NDArrayView* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CNTK.proto.NDArrayView";
  }
  protected:
  explicit NDArrayView(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_CNTK_2eproto);
    return ::descriptor_table_CNTK_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef NDArrayView_FloatValues FloatValues;
  typedef NDArrayView_DoubleValues DoubleValues;
  typedef NDArrayView_BytesValue BytesValue;
  typedef NDArrayView_IntValues IntValues;

  typedef NDArrayView_DataType DataType;
  static constexpr DataType Unknown =
    NDArrayView_DataType_Unknown;
  static constexpr DataType Float =
    NDArrayView_DataType_Float;
  static constexpr DataType Double =
    NDArrayView_DataType_Double;
  static constexpr DataType Float16 =
    NDArrayView_DataType_Float16;
  static constexpr DataType Int8 =
    NDArrayView_DataType_Int8;
  static constexpr DataType Int16 =
    NDArrayView_DataType_Int16;
  static inline bool DataType_IsValid(int value) {
    return NDArrayView_DataType_IsValid(value);
  }
  static constexpr DataType DataType_MIN =
    NDArrayView_DataType_DataType_MIN;
  static constexpr DataType DataType_MAX =
    NDArrayView_DataType_DataType_MAX;
  static constexpr int DataType_ARRAYSIZE =
    NDArrayView_DataType_DataType_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  DataType_descriptor() {
    return NDArrayView_DataType_descriptor();
  }
  template<typename T>
  static inline const std::string& DataType_Name(T enum_t_value) {
    static_assert(::std::is_same<T, DataType>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function DataType_Name.");
    return NDArrayView_DataType_Name(enum_t_value);
  }
  static inline bool DataType_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      DataType* value) {
    return NDArrayView_DataType_Parse(name, value);
  }

  typedef NDArrayView_StorageFormat StorageFormat;
  static constexpr StorageFormat Dense =
    NDArrayView_StorageFormat_Dense;
  static constexpr StorageFormat SparseCSC =
    NDArrayView_StorageFormat_SparseCSC;
  static constexpr StorageFormat SparseBlockCol =
    NDArrayView_StorageFormat_SparseBlockCol;
  static inline bool StorageFormat_IsValid(int value) {
    return NDArrayView_StorageFormat_IsValid(value);
  }
  static constexpr StorageFormat StorageFormat_MIN =
    NDArrayView_StorageFormat_StorageFormat_MIN;
  static constexpr StorageFormat StorageFormat_MAX =
    NDArrayView_StorageFormat_StorageFormat_MAX;
  static constexpr int StorageFormat_ARRAYSIZE =
    NDArrayView_StorageFormat_StorageFormat_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  StorageFormat_descriptor() {
    return NDArrayView_StorageFormat_descriptor();
  }
  template<typename T>
  static inline const std::string& StorageFormat_Name(T enum_t_value) {
    static_assert(::std::is_same<T, StorageFormat>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function StorageFormat_Name.");
    return NDArrayView_StorageFormat_Name(enum_t_value);
  }
  static inline bool StorageFormat_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      StorageFormat* value) {
    return NDArrayView_StorageFormat_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kShapeFieldNumber = 3,
    kDataTypeFieldNumber = 1,
    kStorageFormatFieldNumber = 2,
    kFloatValuesFieldNumber = 4,
    kDoubleValuesFieldNumber = 5,
    kBytesValueFieldNumber = 6,
    kSint32ValuesFieldNumber = 7,
  };
  // .CNTK.proto.NDShape shape = 3;
  bool has_shape() const;
  private:
  bool _internal_has_shape() const;
  public:
  void clear_shape();
  const ::CNTK::proto::NDShape& shape() const;
  ::CNTK::proto::NDShape* release_shape();
  ::CNTK::proto::NDShape* mutable_shape();
  void set_allocated_shape(::CNTK::proto::NDShape* shape);
  private:
  const ::CNTK::proto::NDShape& _internal_shape() const;
  ::CNTK::proto::NDShape* _internal_mutable_shape();
  public:
  void unsafe_arena_set_allocated_shape(
      ::CNTK::proto::NDShape* shape);
  ::CNTK::proto::NDShape* unsafe_arena_release_shape();

  // .CNTK.proto.NDArrayView.DataType data_type = 1;
  void clear_data_type();
  ::CNTK::proto::NDArrayView_DataType data_type() const;
  void set_data_type(::CNTK::proto::NDArrayView_DataType value);
  private:
  ::CNTK::proto::NDArrayView_DataType _internal_data_type() const;
  void _internal_set_data_type(::CNTK::proto::NDArrayView_DataType value);
  public:

  // .CNTK.proto.NDArrayView.StorageFormat storage_format = 2;
  void clear_storage_format();
  ::CNTK::proto::NDArrayView_StorageFormat storage_format() const;
  void set_storage_format(::CNTK::proto::NDArrayView_StorageFormat value);
  private:
  ::CNTK::proto::NDArrayView_StorageFormat _internal_storage_format() const;
  void _internal_set_storage_format(::CNTK::proto::NDArrayView_StorageFormat value);
  public:

  // .CNTK.proto.NDArrayView.FloatValues float_values = 4;
  bool has_float_values() const;
  private:
  bool _internal_has_float_values() const;
  public:
  void clear_float_values();
  const ::CNTK::proto::NDArrayView_FloatValues& float_values() const;
  ::CNTK::proto::NDArrayView_FloatValues* release_float_values();
  ::CNTK::proto::NDArrayView_FloatValues* mutable_float_values();
  void set_allocated_float_values(::CNTK::proto::NDArrayView_FloatValues* float_values);
  private:
  const ::CNTK::proto::NDArrayView_FloatValues& _internal_float_values() const;
  ::CNTK::proto::NDArrayView_FloatValues* _internal_mutable_float_values();
  public:
  void unsafe_arena_set_allocated_float_values(
      ::CNTK::proto::NDArrayView_FloatValues* float_values);
  ::CNTK::proto::NDArrayView_FloatValues* unsafe_arena_release_float_values();

  // .CNTK.proto.NDArrayView.DoubleValues double_values = 5;
  bool has_double_values() const;
  private:
  bool _internal_has_double_values() const;
  public:
  void clear_double_values();
  const ::CNTK::proto::NDArrayView_DoubleValues& double_values() const;
  ::CNTK::proto::NDArrayView_DoubleValues* release_double_values();
  ::CNTK::proto::NDArrayView_DoubleValues* mutable_double_values();
  void set_allocated_double_values(::CNTK::proto::NDArrayView_DoubleValues* double_values);
  private:
  const ::CNTK::proto::NDArrayView_DoubleValues& _internal_double_values() const;
  ::CNTK::proto::NDArrayView_DoubleValues* _internal_mutable_double_values();
  public:
  void unsafe_arena_set_allocated_double_values(
      ::CNTK::proto::NDArrayView_DoubleValues* double_values);
  ::CNTK::proto::NDArrayView_DoubleValues* unsafe_arena_release_double_values();

  // .CNTK.proto.NDArrayView.BytesValue bytes_value = 6;
  bool has_bytes_value() const;
  private:
  bool _internal_has_bytes_value() const;
  public:
  void clear_bytes_value();
  const ::CNTK::proto::NDArrayView_BytesValue& bytes_value() const;
  ::CNTK::proto::NDArrayView_BytesValue* release_bytes_value();
  ::CNTK::proto::NDArrayView_BytesValue* mutable_bytes_value();
  void set_allocated_bytes_value(::CNTK::proto::NDArrayView_BytesValue* bytes_value);
  private:
  const ::CNTK::proto::NDArrayView_BytesValue& _internal_bytes_value() const;
  ::CNTK::proto::NDArrayView_BytesValue* _internal_mutable_bytes_value();
  public:
  void unsafe_arena_set_allocated_bytes_value(
      ::CNTK::proto::NDArrayView_BytesValue* bytes_value);
  ::CNTK::proto::NDArrayView_BytesValue* unsafe_arena_release_bytes_value();

  // .CNTK.proto.NDArrayView.IntValues sint32_values = 7;
  bool has_sint32_values() const;
  private:
  bool _internal_has_sint32_values() const;
  public:
  void clear_sint32_values();
  const ::CNTK::proto::NDArrayView_IntValues& sint32_values() const;
  ::CNTK::proto::NDArrayView_IntValues* release_sint32_values();
  ::CNTK::proto::NDArrayView_IntValues* mutable_sint32_values();
  void set_allocated_sint32_values(::CNTK::proto::NDArrayView_IntValues* sint32_values);
  private:
  const ::CNTK::proto::NDArrayView_IntValues& _internal_sint32_values() const;
  ::CNTK::proto::NDArrayView_IntValues* _internal_mutable_sint32_values();
  public:
  void unsafe_arena_set_allocated_sint32_values(
      ::CNTK::proto::NDArrayView_IntValues* sint32_values);
  ::CNTK::proto::NDArrayView_IntValues* unsafe_arena_release_sint32_values();

  void clear_values();
  ValuesCase values_case() const;
  // @@protoc_insertion_point(class_scope:CNTK.proto.NDArrayView)
 private:
  class _Internal;
  void set_has_float_values();
  void set_has_double_values();
  void set_has_bytes_value();
  void set_has_sint32_values();

  inline bool has_values() const;
  inline void clear_has_values();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::CNTK::proto::NDShape* shape_;
  int data_type_;
  int storage_format_;
  union ValuesUnion {
    ValuesUnion() {}
    ::CNTK::proto::NDArrayView_FloatValues* float_values_;
    ::CNTK::proto::NDArrayView_DoubleValues* double_values_;
    ::CNTK::proto::NDArrayView_BytesValue* bytes_value_;
    ::CNTK::proto::NDArrayView_IntValues* sint32_values_;
  } values_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 _oneof_case_[1];

  friend struct ::TableStruct_CNTK_2eproto;
};
// -------------------------------------------------------------------

class Vector PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CNTK.proto.Vector) */ {
 public:
  inline Vector() : Vector(nullptr) {}
  virtual ~Vector();

  Vector(const Vector& from);
  Vector(Vector&& from) noexcept
    : Vector() {
    *this = ::std::move(from);
  }

  inline Vector& operator=(const Vector& from) {
    CopyFrom(from);
    return *this;
  }
  inline Vector& operator=(Vector&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Vector& default_instance();

  static inline const Vector* internal_default_instance() {
    return reinterpret_cast<const Vector*>(
               &_Vector_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(Vector& a, Vector& b) {
    a.Swap(&b);
  }
  inline void Swap(Vector* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Vector* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Vector* New() const final {
    return CreateMaybeMessage<Vector>(nullptr);
  }

  Vector* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Vector>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Vector& from);
  void MergeFrom(const Vector& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Vector* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CNTK.proto.Vector";
  }
  protected:
  explicit Vector(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_CNTK_2eproto);
    return ::descriptor_table_CNTK_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kValueFieldNumber = 1,
  };
  // repeated .CNTK.proto.DictionaryValue value = 1;
  int value_size() const;
  private:
  int _internal_value_size() const;
  public:
  void clear_value();
  ::CNTK::proto::DictionaryValue* mutable_value(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CNTK::proto::DictionaryValue >*
      mutable_value();
  private:
  const ::CNTK::proto::DictionaryValue& _internal_value(int index) const;
  ::CNTK::proto::DictionaryValue* _internal_add_value();
  public:
  const ::CNTK::proto::DictionaryValue& value(int index) const;
  ::CNTK::proto::DictionaryValue* add_value();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CNTK::proto::DictionaryValue >&
      value() const;

  // @@protoc_insertion_point(class_scope:CNTK.proto.Vector)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CNTK::proto::DictionaryValue > value_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_CNTK_2eproto;
};
// -------------------------------------------------------------------

class Dictionary_DataEntry_DoNotUse : public ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<Dictionary_DataEntry_DoNotUse, 
    std::string, ::CNTK::proto::DictionaryValue,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE> {
public:
  typedef ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<Dictionary_DataEntry_DoNotUse, 
    std::string, ::CNTK::proto::DictionaryValue,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE> SuperType;
  Dictionary_DataEntry_DoNotUse();
  explicit Dictionary_DataEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void MergeFrom(const Dictionary_DataEntry_DoNotUse& other);
  static const Dictionary_DataEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const Dictionary_DataEntry_DoNotUse*>(&_Dictionary_DataEntry_DoNotUse_default_instance_); }
  static bool ValidateKey(std::string* s) {
    return ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(s->data(), static_cast<int>(s->size()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "CNTK.proto.Dictionary.DataEntry.key");
 }
  static bool ValidateValue(void*) { return true; }
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& other) final;
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_CNTK_2eproto);
    return ::descriptor_table_CNTK_2eproto.file_level_metadata[8];
  }

  public:
};

// -------------------------------------------------------------------

class Dictionary PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CNTK.proto.Dictionary) */ {
 public:
  inline Dictionary() : Dictionary(nullptr) {}
  virtual ~Dictionary();

  Dictionary(const Dictionary& from);
  Dictionary(Dictionary&& from) noexcept
    : Dictionary() {
    *this = ::std::move(from);
  }

  inline Dictionary& operator=(const Dictionary& from) {
    CopyFrom(from);
    return *this;
  }
  inline Dictionary& operator=(Dictionary&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Dictionary& default_instance();

  static inline const Dictionary* internal_default_instance() {
    return reinterpret_cast<const Dictionary*>(
               &_Dictionary_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(Dictionary& a, Dictionary& b) {
    a.Swap(&b);
  }
  inline void Swap(Dictionary* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Dictionary* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Dictionary* New() const final {
    return CreateMaybeMessage<Dictionary>(nullptr);
  }

  Dictionary* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Dictionary>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Dictionary& from);
  void MergeFrom(const Dictionary& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Dictionary* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CNTK.proto.Dictionary";
  }
  protected:
  explicit Dictionary(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_CNTK_2eproto);
    return ::descriptor_table_CNTK_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------


  // accessors -------------------------------------------------------

  enum : int {
    kDataFieldNumber = 2,
    kVersionFieldNumber = 1,
  };
  // map<string, .CNTK.proto.DictionaryValue> data = 2;
  int data_size() const;
  private:
  int _internal_data_size() const;
  public:
  void clear_data();
  private:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::CNTK::proto::DictionaryValue >&
      _internal_data() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::CNTK::proto::DictionaryValue >*
      _internal_mutable_data();
  public:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::CNTK::proto::DictionaryValue >&
      data() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::CNTK::proto::DictionaryValue >*
      mutable_data();

  // uint64 version = 1;
  void clear_version();
  ::PROTOBUF_NAMESPACE_ID::uint64 version() const;
  void set_version(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_version() const;
  void _internal_set_version(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // @@protoc_insertion_point(class_scope:CNTK.proto.Dictionary)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::MapField<
      Dictionary_DataEntry_DoNotUse,
      std::string, ::CNTK::proto::DictionaryValue,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE> data_;
  ::PROTOBUF_NAMESPACE_ID::uint64 version_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_CNTK_2eproto;
};
// -------------------------------------------------------------------

class DictionaryValue PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CNTK.proto.DictionaryValue) */ {
 public:
  inline DictionaryValue() : DictionaryValue(nullptr) {}
  virtual ~DictionaryValue();

  DictionaryValue(const DictionaryValue& from);
  DictionaryValue(DictionaryValue&& from) noexcept
    : DictionaryValue() {
    *this = ::std::move(from);
  }

  inline DictionaryValue& operator=(const DictionaryValue& from) {
    CopyFrom(from);
    return *this;
  }
  inline DictionaryValue& operator=(DictionaryValue&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const DictionaryValue& default_instance();

  enum ValueCase {
    kBoolValue = 3,
    kIntValue = 4,
    kSizeTValue = 5,
    kFloatValue = 6,
    kDoubleValue = 7,
    kStringValue = 8,
    kNdShapeValue = 9,
    kAxisValue = 10,
    kVectorValue = 11,
    kDictionaryValue = 12,
    kNdArrayViewValue = 13,
    VALUE_NOT_SET = 0,
  };

  static inline const DictionaryValue* internal_default_instance() {
    return reinterpret_cast<const DictionaryValue*>(
               &_DictionaryValue_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  friend void swap(DictionaryValue& a, DictionaryValue& b) {
    a.Swap(&b);
  }
  inline void Swap(DictionaryValue* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DictionaryValue* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline DictionaryValue* New() const final {
    return CreateMaybeMessage<DictionaryValue>(nullptr);
  }

  DictionaryValue* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<DictionaryValue>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const DictionaryValue& from);
  void MergeFrom(const DictionaryValue& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DictionaryValue* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CNTK.proto.DictionaryValue";
  }
  protected:
  explicit DictionaryValue(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_CNTK_2eproto);
    return ::descriptor_table_CNTK_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef DictionaryValue_Type Type;
  static constexpr Type None =
    DictionaryValue_Type_None;
  static constexpr Type Bool =
    DictionaryValue_Type_Bool;
  static constexpr Type Int =
    DictionaryValue_Type_Int;
  static constexpr Type SizeT =
    DictionaryValue_Type_SizeT;
  static constexpr Type Float =
    DictionaryValue_Type_Float;
  static constexpr Type Double =
    DictionaryValue_Type_Double;
  static constexpr Type String =
    DictionaryValue_Type_String;
  static constexpr Type NDShape =
    DictionaryValue_Type_NDShape;
  static constexpr Type Axis =
    DictionaryValue_Type_Axis;
  static constexpr Type Vector =
    DictionaryValue_Type_Vector;
  static constexpr Type Dictionary =
    DictionaryValue_Type_Dictionary;
  static constexpr Type NDArrayView =
    DictionaryValue_Type_NDArrayView;
  static inline bool Type_IsValid(int value) {
    return DictionaryValue_Type_IsValid(value);
  }
  static constexpr Type Type_MIN =
    DictionaryValue_Type_Type_MIN;
  static constexpr Type Type_MAX =
    DictionaryValue_Type_Type_MAX;
  static constexpr int Type_ARRAYSIZE =
    DictionaryValue_Type_Type_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  Type_descriptor() {
    return DictionaryValue_Type_descriptor();
  }
  template<typename T>
  static inline const std::string& Type_Name(T enum_t_value) {
    static_assert(::std::is_same<T, Type>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function Type_Name.");
    return DictionaryValue_Type_Name(enum_t_value);
  }
  static inline bool Type_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      Type* value) {
    return DictionaryValue_Type_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kVersionFieldNumber = 1,
    kValueTypeFieldNumber = 2,
    kBoolValueFieldNumber = 3,
    kIntValueFieldNumber = 4,
    kSizeTValueFieldNumber = 5,
    kFloatValueFieldNumber = 6,
    kDoubleValueFieldNumber = 7,
    kStringValueFieldNumber = 8,
    kNdShapeValueFieldNumber = 9,
    kAxisValueFieldNumber = 10,
    kVectorValueFieldNumber = 11,
    kDictionaryValueFieldNumber = 12,
    kNdArrayViewValueFieldNumber = 13,
  };
  // uint64 version = 1;
  void clear_version();
  ::PROTOBUF_NAMESPACE_ID::uint64 version() const;
  void set_version(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_version() const;
  void _internal_set_version(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // .CNTK.proto.DictionaryValue.Type value_type = 2;
  void clear_value_type();
  ::CNTK::proto::DictionaryValue_Type value_type() const;
  void set_value_type(::CNTK::proto::DictionaryValue_Type value);
  private:
  ::CNTK::proto::DictionaryValue_Type _internal_value_type() const;
  void _internal_set_value_type(::CNTK::proto::DictionaryValue_Type value);
  public:

  // bool bool_value = 3;
  private:
  bool _internal_has_bool_value() const;
  public:
  void clear_bool_value();
  bool bool_value() const;
  void set_bool_value(bool value);
  private:
  bool _internal_bool_value() const;
  void _internal_set_bool_value(bool value);
  public:

  // int32 int_value = 4;
  private:
  bool _internal_has_int_value() const;
  public:
  void clear_int_value();
  ::PROTOBUF_NAMESPACE_ID::int32 int_value() const;
  void set_int_value(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_int_value() const;
  void _internal_set_int_value(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // uint64 size_t_value = 5;
  private:
  bool _internal_has_size_t_value() const;
  public:
  void clear_size_t_value();
  ::PROTOBUF_NAMESPACE_ID::uint64 size_t_value() const;
  void set_size_t_value(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_size_t_value() const;
  void _internal_set_size_t_value(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // float float_value = 6;
  private:
  bool _internal_has_float_value() const;
  public:
  void clear_float_value();
  float float_value() const;
  void set_float_value(float value);
  private:
  float _internal_float_value() const;
  void _internal_set_float_value(float value);
  public:

  // double double_value = 7;
  private:
  bool _internal_has_double_value() const;
  public:
  void clear_double_value();
  double double_value() const;
  void set_double_value(double value);
  private:
  double _internal_double_value() const;
  void _internal_set_double_value(double value);
  public:

  // string string_value = 8;
  private:
  bool _internal_has_string_value() const;
  public:
  void clear_string_value();
  const std::string& string_value() const;
  void set_string_value(const std::string& value);
  void set_string_value(std::string&& value);
  void set_string_value(const char* value);
  void set_string_value(const char* value, size_t size);
  std::string* mutable_string_value();
  std::string* release_string_value();
  void set_allocated_string_value(std::string* string_value);
  private:
  const std::string& _internal_string_value() const;
  void _internal_set_string_value(const std::string& value);
  std::string* _internal_mutable_string_value();
  public:

  // .CNTK.proto.NDShape nd_shape_value = 9;
  bool has_nd_shape_value() const;
  private:
  bool _internal_has_nd_shape_value() const;
  public:
  void clear_nd_shape_value();
  const ::CNTK::proto::NDShape& nd_shape_value() const;
  ::CNTK::proto::NDShape* release_nd_shape_value();
  ::CNTK::proto::NDShape* mutable_nd_shape_value();
  void set_allocated_nd_shape_value(::CNTK::proto::NDShape* nd_shape_value);
  private:
  const ::CNTK::proto::NDShape& _internal_nd_shape_value() const;
  ::CNTK::proto::NDShape* _internal_mutable_nd_shape_value();
  public:
  void unsafe_arena_set_allocated_nd_shape_value(
      ::CNTK::proto::NDShape* nd_shape_value);
  ::CNTK::proto::NDShape* unsafe_arena_release_nd_shape_value();

  // .CNTK.proto.Axis axis_value = 10;
  bool has_axis_value() const;
  private:
  bool _internal_has_axis_value() const;
  public:
  void clear_axis_value();
  const ::CNTK::proto::Axis& axis_value() const;
  ::CNTK::proto::Axis* release_axis_value();
  ::CNTK::proto::Axis* mutable_axis_value();
  void set_allocated_axis_value(::CNTK::proto::Axis* axis_value);
  private:
  const ::CNTK::proto::Axis& _internal_axis_value() const;
  ::CNTK::proto::Axis* _internal_mutable_axis_value();
  public:
  void unsafe_arena_set_allocated_axis_value(
      ::CNTK::proto::Axis* axis_value);
  ::CNTK::proto::Axis* unsafe_arena_release_axis_value();

  // .CNTK.proto.Vector vector_value = 11;
  bool has_vector_value() const;
  private:
  bool _internal_has_vector_value() const;
  public:
  void clear_vector_value();
  const ::CNTK::proto::Vector& vector_value() const;
  ::CNTK::proto::Vector* release_vector_value();
  ::CNTK::proto::Vector* mutable_vector_value();
  void set_allocated_vector_value(::CNTK::proto::Vector* vector_value);
  private:
  const ::CNTK::proto::Vector& _internal_vector_value() const;
  ::CNTK::proto::Vector* _internal_mutable_vector_value();
  public:
  void unsafe_arena_set_allocated_vector_value(
      ::CNTK::proto::Vector* vector_value);
  ::CNTK::proto::Vector* unsafe_arena_release_vector_value();

  // .CNTK.proto.Dictionary dictionary_value = 12;
  bool has_dictionary_value() const;
  private:
  bool _internal_has_dictionary_value() const;
  public:
  void clear_dictionary_value();
  const ::CNTK::proto::Dictionary& dictionary_value() const;
  ::CNTK::proto::Dictionary* release_dictionary_value();
  ::CNTK::proto::Dictionary* mutable_dictionary_value();
  void set_allocated_dictionary_value(::CNTK::proto::Dictionary* dictionary_value);
  private:
  const ::CNTK::proto::Dictionary& _internal_dictionary_value() const;
  ::CNTK::proto::Dictionary* _internal_mutable_dictionary_value();
  public:
  void unsafe_arena_set_allocated_dictionary_value(
      ::CNTK::proto::Dictionary* dictionary_value);
  ::CNTK::proto::Dictionary* unsafe_arena_release_dictionary_value();

  // .CNTK.proto.NDArrayView nd_array_view_value = 13;
  bool has_nd_array_view_value() const;
  private:
  bool _internal_has_nd_array_view_value() const;
  public:
  void clear_nd_array_view_value();
  const ::CNTK::proto::NDArrayView& nd_array_view_value() const;
  ::CNTK::proto::NDArrayView* release_nd_array_view_value();
  ::CNTK::proto::NDArrayView* mutable_nd_array_view_value();
  void set_allocated_nd_array_view_value(::CNTK::proto::NDArrayView* nd_array_view_value);
  private:
  const ::CNTK::proto::NDArrayView& _internal_nd_array_view_value() const;
  ::CNTK::proto::NDArrayView* _internal_mutable_nd_array_view_value();
  public:
  void unsafe_arena_set_allocated_nd_array_view_value(
      ::CNTK::proto::NDArrayView* nd_array_view_value);
  ::CNTK::proto::NDArrayView* unsafe_arena_release_nd_array_view_value();

  void clear_value();
  ValueCase value_case() const;
  // @@protoc_insertion_point(class_scope:CNTK.proto.DictionaryValue)
 private:
  class _Internal;
  void set_has_bool_value();
  void set_has_int_value();
  void set_has_size_t_value();
  void set_has_float_value();
  void set_has_double_value();
  void set_has_string_value();
  void set_has_nd_shape_value();
  void set_has_axis_value();
  void set_has_vector_value();
  void set_has_dictionary_value();
  void set_has_nd_array_view_value();

  inline bool has_value() const;
  inline void clear_has_value();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::uint64 version_;
  int value_type_;
  union ValueUnion {
    ValueUnion() {}
    bool bool_value_;
    ::PROTOBUF_NAMESPACE_ID::int32 int_value_;
    ::PROTOBUF_NAMESPACE_ID::uint64 size_t_value_;
    float float_value_;
    double double_value_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr string_value_;
    ::CNTK::proto::NDShape* nd_shape_value_;
    ::CNTK::proto::Axis* axis_value_;
    ::CNTK::proto::Vector* vector_value_;
    ::CNTK::proto::Dictionary* dictionary_value_;
    ::CNTK::proto::NDArrayView* nd_array_view_value_;
  } value_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 _oneof_case_[1];

  friend struct ::TableStruct_CNTK_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// NDShape

// repeated uint64 shape_dim = 1 [packed = true];
inline int NDShape::_internal_shape_dim_size() const {
  return shape_dim_.size();
}
inline int NDShape::shape_dim_size() const {
  return _internal_shape_dim_size();
}
inline void NDShape::clear_shape_dim() {
  shape_dim_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 NDShape::_internal_shape_dim(int index) const {
  return shape_dim_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 NDShape::shape_dim(int index) const {
  // @@protoc_insertion_point(field_get:CNTK.proto.NDShape.shape_dim)
  return _internal_shape_dim(index);
}
inline void NDShape::set_shape_dim(int index, ::PROTOBUF_NAMESPACE_ID::uint64 value) {
  shape_dim_.Set(index, value);
  // @@protoc_insertion_point(field_set:CNTK.proto.NDShape.shape_dim)
}
inline void NDShape::_internal_add_shape_dim(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  shape_dim_.Add(value);
}
inline void NDShape::add_shape_dim(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_add_shape_dim(value);
  // @@protoc_insertion_point(field_add:CNTK.proto.NDShape.shape_dim)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >&
NDShape::_internal_shape_dim() const {
  return shape_dim_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >&
NDShape::shape_dim() const {
  // @@protoc_insertion_point(field_list:CNTK.proto.NDShape.shape_dim)
  return _internal_shape_dim();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >*
NDShape::_internal_mutable_shape_dim() {
  return &shape_dim_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >*
NDShape::mutable_shape_dim() {
  // @@protoc_insertion_point(field_mutable_list:CNTK.proto.NDShape.shape_dim)
  return _internal_mutable_shape_dim();
}

// -------------------------------------------------------------------

// Axis

// int32 static_axis_idx = 1;
inline void Axis::clear_static_axis_idx() {
  static_axis_idx_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Axis::_internal_static_axis_idx() const {
  return static_axis_idx_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Axis::static_axis_idx() const {
  // @@protoc_insertion_point(field_get:CNTK.proto.Axis.static_axis_idx)
  return _internal_static_axis_idx();
}
inline void Axis::_internal_set_static_axis_idx(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  static_axis_idx_ = value;
}
inline void Axis::set_static_axis_idx(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_static_axis_idx(value);
  // @@protoc_insertion_point(field_set:CNTK.proto.Axis.static_axis_idx)
}

// string name = 2;
inline void Axis::clear_name() {
  name_.ClearToEmpty();
}
inline const std::string& Axis::name() const {
  // @@protoc_insertion_point(field_get:CNTK.proto.Axis.name)
  return _internal_name();
}
inline void Axis::set_name(const std::string& value) {
  _internal_set_name(value);
  // @@protoc_insertion_point(field_set:CNTK.proto.Axis.name)
}
inline std::string* Axis::mutable_name() {
  // @@protoc_insertion_point(field_mutable:CNTK.proto.Axis.name)
  return _internal_mutable_name();
}
inline const std::string& Axis::_internal_name() const {
  return name_.Get();
}
inline void Axis::_internal_set_name(const std::string& value) {
  
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void Axis::set_name(std::string&& value) {
  
  name_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:CNTK.proto.Axis.name)
}
inline void Axis::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:CNTK.proto.Axis.name)
}
inline void Axis::set_name(const char* value,
    size_t size) {
  
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:CNTK.proto.Axis.name)
}
inline std::string* Axis::_internal_mutable_name() {
  
  return name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* Axis::release_name() {
  // @@protoc_insertion_point(field_release:CNTK.proto.Axis.name)
  return name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Axis::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:CNTK.proto.Axis.name)
}

// bool is_ordered_dynamic_axis = 3;
inline void Axis::clear_is_ordered_dynamic_axis() {
  is_ordered_dynamic_axis_ = false;
}
inline bool Axis::_internal_is_ordered_dynamic_axis() const {
  return is_ordered_dynamic_axis_;
}
inline bool Axis::is_ordered_dynamic_axis() const {
  // @@protoc_insertion_point(field_get:CNTK.proto.Axis.is_ordered_dynamic_axis)
  return _internal_is_ordered_dynamic_axis();
}
inline void Axis::_internal_set_is_ordered_dynamic_axis(bool value) {
  
  is_ordered_dynamic_axis_ = value;
}
inline void Axis::set_is_ordered_dynamic_axis(bool value) {
  _internal_set_is_ordered_dynamic_axis(value);
  // @@protoc_insertion_point(field_set:CNTK.proto.Axis.is_ordered_dynamic_axis)
}

// -------------------------------------------------------------------

// NDArrayView_FloatValues

// repeated float value = 1 [packed = true];
inline int NDArrayView_FloatValues::_internal_value_size() const {
  return value_.size();
}
inline int NDArrayView_FloatValues::value_size() const {
  return _internal_value_size();
}
inline void NDArrayView_FloatValues::clear_value() {
  value_.Clear();
}
inline float NDArrayView_FloatValues::_internal_value(int index) const {
  return value_.Get(index);
}
inline float NDArrayView_FloatValues::value(int index) const {
  // @@protoc_insertion_point(field_get:CNTK.proto.NDArrayView.FloatValues.value)
  return _internal_value(index);
}
inline void NDArrayView_FloatValues::set_value(int index, float value) {
  value_.Set(index, value);
  // @@protoc_insertion_point(field_set:CNTK.proto.NDArrayView.FloatValues.value)
}
inline void NDArrayView_FloatValues::_internal_add_value(float value) {
  value_.Add(value);
}
inline void NDArrayView_FloatValues::add_value(float value) {
  _internal_add_value(value);
  // @@protoc_insertion_point(field_add:CNTK.proto.NDArrayView.FloatValues.value)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
NDArrayView_FloatValues::_internal_value() const {
  return value_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
NDArrayView_FloatValues::value() const {
  // @@protoc_insertion_point(field_list:CNTK.proto.NDArrayView.FloatValues.value)
  return _internal_value();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
NDArrayView_FloatValues::_internal_mutable_value() {
  return &value_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
NDArrayView_FloatValues::mutable_value() {
  // @@protoc_insertion_point(field_mutable_list:CNTK.proto.NDArrayView.FloatValues.value)
  return _internal_mutable_value();
}

// -------------------------------------------------------------------

// NDArrayView_DoubleValues

// repeated double value = 1 [packed = true];
inline int NDArrayView_DoubleValues::_internal_value_size() const {
  return value_.size();
}
inline int NDArrayView_DoubleValues::value_size() const {
  return _internal_value_size();
}
inline void NDArrayView_DoubleValues::clear_value() {
  value_.Clear();
}
inline double NDArrayView_DoubleValues::_internal_value(int index) const {
  return value_.Get(index);
}
inline double NDArrayView_DoubleValues::value(int index) const {
  // @@protoc_insertion_point(field_get:CNTK.proto.NDArrayView.DoubleValues.value)
  return _internal_value(index);
}
inline void NDArrayView_DoubleValues::set_value(int index, double value) {
  value_.Set(index, value);
  // @@protoc_insertion_point(field_set:CNTK.proto.NDArrayView.DoubleValues.value)
}
inline void NDArrayView_DoubleValues::_internal_add_value(double value) {
  value_.Add(value);
}
inline void NDArrayView_DoubleValues::add_value(double value) {
  _internal_add_value(value);
  // @@protoc_insertion_point(field_add:CNTK.proto.NDArrayView.DoubleValues.value)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
NDArrayView_DoubleValues::_internal_value() const {
  return value_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
NDArrayView_DoubleValues::value() const {
  // @@protoc_insertion_point(field_list:CNTK.proto.NDArrayView.DoubleValues.value)
  return _internal_value();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
NDArrayView_DoubleValues::_internal_mutable_value() {
  return &value_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
NDArrayView_DoubleValues::mutable_value() {
  // @@protoc_insertion_point(field_mutable_list:CNTK.proto.NDArrayView.DoubleValues.value)
  return _internal_mutable_value();
}

// -------------------------------------------------------------------

// NDArrayView_BytesValue

// bytes value = 1;
inline void NDArrayView_BytesValue::clear_value() {
  value_.ClearToEmpty();
}
inline const std::string& NDArrayView_BytesValue::value() const {
  // @@protoc_insertion_point(field_get:CNTK.proto.NDArrayView.BytesValue.value)
  return _internal_value();
}
inline void NDArrayView_BytesValue::set_value(const std::string& value) {
  _internal_set_value(value);
  // @@protoc_insertion_point(field_set:CNTK.proto.NDArrayView.BytesValue.value)
}
inline std::string* NDArrayView_BytesValue::mutable_value() {
  // @@protoc_insertion_point(field_mutable:CNTK.proto.NDArrayView.BytesValue.value)
  return _internal_mutable_value();
}
inline const std::string& NDArrayView_BytesValue::_internal_value() const {
  return value_.Get();
}
inline void NDArrayView_BytesValue::_internal_set_value(const std::string& value) {
  
  value_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void NDArrayView_BytesValue::set_value(std::string&& value) {
  
  value_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:CNTK.proto.NDArrayView.BytesValue.value)
}
inline void NDArrayView_BytesValue::set_value(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  value_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:CNTK.proto.NDArrayView.BytesValue.value)
}
inline void NDArrayView_BytesValue::set_value(const void* value,
    size_t size) {
  
  value_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:CNTK.proto.NDArrayView.BytesValue.value)
}
inline std::string* NDArrayView_BytesValue::_internal_mutable_value() {
  
  return value_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* NDArrayView_BytesValue::release_value() {
  // @@protoc_insertion_point(field_release:CNTK.proto.NDArrayView.BytesValue.value)
  return value_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void NDArrayView_BytesValue::set_allocated_value(std::string* value) {
  if (value != nullptr) {
    
  } else {
    
  }
  value_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:CNTK.proto.NDArrayView.BytesValue.value)
}

// -------------------------------------------------------------------

// NDArrayView_IntValues

// repeated sint32 value = 1 [packed = true];
inline int NDArrayView_IntValues::_internal_value_size() const {
  return value_.size();
}
inline int NDArrayView_IntValues::value_size() const {
  return _internal_value_size();
}
inline void NDArrayView_IntValues::clear_value() {
  value_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::int32 NDArrayView_IntValues::_internal_value(int index) const {
  return value_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::int32 NDArrayView_IntValues::value(int index) const {
  // @@protoc_insertion_point(field_get:CNTK.proto.NDArrayView.IntValues.value)
  return _internal_value(index);
}
inline void NDArrayView_IntValues::set_value(int index, ::PROTOBUF_NAMESPACE_ID::int32 value) {
  value_.Set(index, value);
  // @@protoc_insertion_point(field_set:CNTK.proto.NDArrayView.IntValues.value)
}
inline void NDArrayView_IntValues::_internal_add_value(::PROTOBUF_NAMESPACE_ID::int32 value) {
  value_.Add(value);
}
inline void NDArrayView_IntValues::add_value(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_add_value(value);
  // @@protoc_insertion_point(field_add:CNTK.proto.NDArrayView.IntValues.value)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
NDArrayView_IntValues::_internal_value() const {
  return value_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
NDArrayView_IntValues::value() const {
  // @@protoc_insertion_point(field_list:CNTK.proto.NDArrayView.IntValues.value)
  return _internal_value();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
NDArrayView_IntValues::_internal_mutable_value() {
  return &value_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
NDArrayView_IntValues::mutable_value() {
  // @@protoc_insertion_point(field_mutable_list:CNTK.proto.NDArrayView.IntValues.value)
  return _internal_mutable_value();
}

// -------------------------------------------------------------------

// NDArrayView

// .CNTK.proto.NDArrayView.DataType data_type = 1;
inline void NDArrayView::clear_data_type() {
  data_type_ = 0;
}
inline ::CNTK::proto::NDArrayView_DataType NDArrayView::_internal_data_type() const {
  return static_cast< ::CNTK::proto::NDArrayView_DataType >(data_type_);
}
inline ::CNTK::proto::NDArrayView_DataType NDArrayView::data_type() const {
  // @@protoc_insertion_point(field_get:CNTK.proto.NDArrayView.data_type)
  return _internal_data_type();
}
inline void NDArrayView::_internal_set_data_type(::CNTK::proto::NDArrayView_DataType value) {
  
  data_type_ = value;
}
inline void NDArrayView::set_data_type(::CNTK::proto::NDArrayView_DataType value) {
  _internal_set_data_type(value);
  // @@protoc_insertion_point(field_set:CNTK.proto.NDArrayView.data_type)
}

// .CNTK.proto.NDArrayView.StorageFormat storage_format = 2;
inline void NDArrayView::clear_storage_format() {
  storage_format_ = 0;
}
inline ::CNTK::proto::NDArrayView_StorageFormat NDArrayView::_internal_storage_format() const {
  return static_cast< ::CNTK::proto::NDArrayView_StorageFormat >(storage_format_);
}
inline ::CNTK::proto::NDArrayView_StorageFormat NDArrayView::storage_format() const {
  // @@protoc_insertion_point(field_get:CNTK.proto.NDArrayView.storage_format)
  return _internal_storage_format();
}
inline void NDArrayView::_internal_set_storage_format(::CNTK::proto::NDArrayView_StorageFormat value) {
  
  storage_format_ = value;
}
inline void NDArrayView::set_storage_format(::CNTK::proto::NDArrayView_StorageFormat value) {
  _internal_set_storage_format(value);
  // @@protoc_insertion_point(field_set:CNTK.proto.NDArrayView.storage_format)
}

// .CNTK.proto.NDShape shape = 3;
inline bool NDArrayView::_internal_has_shape() const {
  return this != internal_default_instance() && shape_ != nullptr;
}
inline bool NDArrayView::has_shape() const {
  return _internal_has_shape();
}
inline void NDArrayView::clear_shape() {
  if (GetArena() == nullptr && shape_ != nullptr) {
    delete shape_;
  }
  shape_ = nullptr;
}
inline const ::CNTK::proto::NDShape& NDArrayView::_internal_shape() const {
  const ::CNTK::proto::NDShape* p = shape_;
  return p != nullptr ? *p : reinterpret_cast<const ::CNTK::proto::NDShape&>(
      ::CNTK::proto::_NDShape_default_instance_);
}
inline const ::CNTK::proto::NDShape& NDArrayView::shape() const {
  // @@protoc_insertion_point(field_get:CNTK.proto.NDArrayView.shape)
  return _internal_shape();
}
inline void NDArrayView::unsafe_arena_set_allocated_shape(
    ::CNTK::proto::NDShape* shape) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(shape_);
  }
  shape_ = shape;
  if (shape) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:CNTK.proto.NDArrayView.shape)
}
inline ::CNTK::proto::NDShape* NDArrayView::release_shape() {
  
  ::CNTK::proto::NDShape* temp = shape_;
  shape_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::CNTK::proto::NDShape* NDArrayView::unsafe_arena_release_shape() {
  // @@protoc_insertion_point(field_release:CNTK.proto.NDArrayView.shape)
  
  ::CNTK::proto::NDShape* temp = shape_;
  shape_ = nullptr;
  return temp;
}
inline ::CNTK::proto::NDShape* NDArrayView::_internal_mutable_shape() {
  
  if (shape_ == nullptr) {
    auto* p = CreateMaybeMessage<::CNTK::proto::NDShape>(GetArena());
    shape_ = p;
  }
  return shape_;
}
inline ::CNTK::proto::NDShape* NDArrayView::mutable_shape() {
  // @@protoc_insertion_point(field_mutable:CNTK.proto.NDArrayView.shape)
  return _internal_mutable_shape();
}
inline void NDArrayView::set_allocated_shape(::CNTK::proto::NDShape* shape) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete shape_;
  }
  if (shape) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(shape);
    if (message_arena != submessage_arena) {
      shape = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, shape, submessage_arena);
    }
    
  } else {
    
  }
  shape_ = shape;
  // @@protoc_insertion_point(field_set_allocated:CNTK.proto.NDArrayView.shape)
}

// .CNTK.proto.NDArrayView.FloatValues float_values = 4;
inline bool NDArrayView::_internal_has_float_values() const {
  return values_case() == kFloatValues;
}
inline bool NDArrayView::has_float_values() const {
  return _internal_has_float_values();
}
inline void NDArrayView::set_has_float_values() {
  _oneof_case_[0] = kFloatValues;
}
inline void NDArrayView::clear_float_values() {
  if (_internal_has_float_values()) {
    if (GetArena() == nullptr) {
      delete values_.float_values_;
    }
    clear_has_values();
  }
}
inline ::CNTK::proto::NDArrayView_FloatValues* NDArrayView::release_float_values() {
  // @@protoc_insertion_point(field_release:CNTK.proto.NDArrayView.float_values)
  if (_internal_has_float_values()) {
    clear_has_values();
      ::CNTK::proto::NDArrayView_FloatValues* temp = values_.float_values_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    values_.float_values_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::CNTK::proto::NDArrayView_FloatValues& NDArrayView::_internal_float_values() const {
  return _internal_has_float_values()
      ? *values_.float_values_
      : reinterpret_cast< ::CNTK::proto::NDArrayView_FloatValues&>(::CNTK::proto::_NDArrayView_FloatValues_default_instance_);
}
inline const ::CNTK::proto::NDArrayView_FloatValues& NDArrayView::float_values() const {
  // @@protoc_insertion_point(field_get:CNTK.proto.NDArrayView.float_values)
  return _internal_float_values();
}
inline ::CNTK::proto::NDArrayView_FloatValues* NDArrayView::unsafe_arena_release_float_values() {
  // @@protoc_insertion_point(field_unsafe_arena_release:CNTK.proto.NDArrayView.float_values)
  if (_internal_has_float_values()) {
    clear_has_values();
    ::CNTK::proto::NDArrayView_FloatValues* temp = values_.float_values_;
    values_.float_values_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void NDArrayView::unsafe_arena_set_allocated_float_values(::CNTK::proto::NDArrayView_FloatValues* float_values) {
  clear_values();
  if (float_values) {
    set_has_float_values();
    values_.float_values_ = float_values;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:CNTK.proto.NDArrayView.float_values)
}
inline ::CNTK::proto::NDArrayView_FloatValues* NDArrayView::_internal_mutable_float_values() {
  if (!_internal_has_float_values()) {
    clear_values();
    set_has_float_values();
    values_.float_values_ = CreateMaybeMessage< ::CNTK::proto::NDArrayView_FloatValues >(GetArena());
  }
  return values_.float_values_;
}
inline ::CNTK::proto::NDArrayView_FloatValues* NDArrayView::mutable_float_values() {
  // @@protoc_insertion_point(field_mutable:CNTK.proto.NDArrayView.float_values)
  return _internal_mutable_float_values();
}

// .CNTK.proto.NDArrayView.DoubleValues double_values = 5;
inline bool NDArrayView::_internal_has_double_values() const {
  return values_case() == kDoubleValues;
}
inline bool NDArrayView::has_double_values() const {
  return _internal_has_double_values();
}
inline void NDArrayView::set_has_double_values() {
  _oneof_case_[0] = kDoubleValues;
}
inline void NDArrayView::clear_double_values() {
  if (_internal_has_double_values()) {
    if (GetArena() == nullptr) {
      delete values_.double_values_;
    }
    clear_has_values();
  }
}
inline ::CNTK::proto::NDArrayView_DoubleValues* NDArrayView::release_double_values() {
  // @@protoc_insertion_point(field_release:CNTK.proto.NDArrayView.double_values)
  if (_internal_has_double_values()) {
    clear_has_values();
      ::CNTK::proto::NDArrayView_DoubleValues* temp = values_.double_values_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    values_.double_values_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::CNTK::proto::NDArrayView_DoubleValues& NDArrayView::_internal_double_values() const {
  return _internal_has_double_values()
      ? *values_.double_values_
      : reinterpret_cast< ::CNTK::proto::NDArrayView_DoubleValues&>(::CNTK::proto::_NDArrayView_DoubleValues_default_instance_);
}
inline const ::CNTK::proto::NDArrayView_DoubleValues& NDArrayView::double_values() const {
  // @@protoc_insertion_point(field_get:CNTK.proto.NDArrayView.double_values)
  return _internal_double_values();
}
inline ::CNTK::proto::NDArrayView_DoubleValues* NDArrayView::unsafe_arena_release_double_values() {
  // @@protoc_insertion_point(field_unsafe_arena_release:CNTK.proto.NDArrayView.double_values)
  if (_internal_has_double_values()) {
    clear_has_values();
    ::CNTK::proto::NDArrayView_DoubleValues* temp = values_.double_values_;
    values_.double_values_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void NDArrayView::unsafe_arena_set_allocated_double_values(::CNTK::proto::NDArrayView_DoubleValues* double_values) {
  clear_values();
  if (double_values) {
    set_has_double_values();
    values_.double_values_ = double_values;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:CNTK.proto.NDArrayView.double_values)
}
inline ::CNTK::proto::NDArrayView_DoubleValues* NDArrayView::_internal_mutable_double_values() {
  if (!_internal_has_double_values()) {
    clear_values();
    set_has_double_values();
    values_.double_values_ = CreateMaybeMessage< ::CNTK::proto::NDArrayView_DoubleValues >(GetArena());
  }
  return values_.double_values_;
}
inline ::CNTK::proto::NDArrayView_DoubleValues* NDArrayView::mutable_double_values() {
  // @@protoc_insertion_point(field_mutable:CNTK.proto.NDArrayView.double_values)
  return _internal_mutable_double_values();
}

// .CNTK.proto.NDArrayView.BytesValue bytes_value = 6;
inline bool NDArrayView::_internal_has_bytes_value() const {
  return values_case() == kBytesValue;
}
inline bool NDArrayView::has_bytes_value() const {
  return _internal_has_bytes_value();
}
inline void NDArrayView::set_has_bytes_value() {
  _oneof_case_[0] = kBytesValue;
}
inline void NDArrayView::clear_bytes_value() {
  if (_internal_has_bytes_value()) {
    if (GetArena() == nullptr) {
      delete values_.bytes_value_;
    }
    clear_has_values();
  }
}
inline ::CNTK::proto::NDArrayView_BytesValue* NDArrayView::release_bytes_value() {
  // @@protoc_insertion_point(field_release:CNTK.proto.NDArrayView.bytes_value)
  if (_internal_has_bytes_value()) {
    clear_has_values();
      ::CNTK::proto::NDArrayView_BytesValue* temp = values_.bytes_value_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    values_.bytes_value_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::CNTK::proto::NDArrayView_BytesValue& NDArrayView::_internal_bytes_value() const {
  return _internal_has_bytes_value()
      ? *values_.bytes_value_
      : reinterpret_cast< ::CNTK::proto::NDArrayView_BytesValue&>(::CNTK::proto::_NDArrayView_BytesValue_default_instance_);
}
inline const ::CNTK::proto::NDArrayView_BytesValue& NDArrayView::bytes_value() const {
  // @@protoc_insertion_point(field_get:CNTK.proto.NDArrayView.bytes_value)
  return _internal_bytes_value();
}
inline ::CNTK::proto::NDArrayView_BytesValue* NDArrayView::unsafe_arena_release_bytes_value() {
  // @@protoc_insertion_point(field_unsafe_arena_release:CNTK.proto.NDArrayView.bytes_value)
  if (_internal_has_bytes_value()) {
    clear_has_values();
    ::CNTK::proto::NDArrayView_BytesValue* temp = values_.bytes_value_;
    values_.bytes_value_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void NDArrayView::unsafe_arena_set_allocated_bytes_value(::CNTK::proto::NDArrayView_BytesValue* bytes_value) {
  clear_values();
  if (bytes_value) {
    set_has_bytes_value();
    values_.bytes_value_ = bytes_value;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:CNTK.proto.NDArrayView.bytes_value)
}
inline ::CNTK::proto::NDArrayView_BytesValue* NDArrayView::_internal_mutable_bytes_value() {
  if (!_internal_has_bytes_value()) {
    clear_values();
    set_has_bytes_value();
    values_.bytes_value_ = CreateMaybeMessage< ::CNTK::proto::NDArrayView_BytesValue >(GetArena());
  }
  return values_.bytes_value_;
}
inline ::CNTK::proto::NDArrayView_BytesValue* NDArrayView::mutable_bytes_value() {
  // @@protoc_insertion_point(field_mutable:CNTK.proto.NDArrayView.bytes_value)
  return _internal_mutable_bytes_value();
}

// .CNTK.proto.NDArrayView.IntValues sint32_values = 7;
inline bool NDArrayView::_internal_has_sint32_values() const {
  return values_case() == kSint32Values;
}
inline bool NDArrayView::has_sint32_values() const {
  return _internal_has_sint32_values();
}
inline void NDArrayView::set_has_sint32_values() {
  _oneof_case_[0] = kSint32Values;
}
inline void NDArrayView::clear_sint32_values() {
  if (_internal_has_sint32_values()) {
    if (GetArena() == nullptr) {
      delete values_.sint32_values_;
    }
    clear_has_values();
  }
}
inline ::CNTK::proto::NDArrayView_IntValues* NDArrayView::release_sint32_values() {
  // @@protoc_insertion_point(field_release:CNTK.proto.NDArrayView.sint32_values)
  if (_internal_has_sint32_values()) {
    clear_has_values();
      ::CNTK::proto::NDArrayView_IntValues* temp = values_.sint32_values_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    values_.sint32_values_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::CNTK::proto::NDArrayView_IntValues& NDArrayView::_internal_sint32_values() const {
  return _internal_has_sint32_values()
      ? *values_.sint32_values_
      : reinterpret_cast< ::CNTK::proto::NDArrayView_IntValues&>(::CNTK::proto::_NDArrayView_IntValues_default_instance_);
}
inline const ::CNTK::proto::NDArrayView_IntValues& NDArrayView::sint32_values() const {
  // @@protoc_insertion_point(field_get:CNTK.proto.NDArrayView.sint32_values)
  return _internal_sint32_values();
}
inline ::CNTK::proto::NDArrayView_IntValues* NDArrayView::unsafe_arena_release_sint32_values() {
  // @@protoc_insertion_point(field_unsafe_arena_release:CNTK.proto.NDArrayView.sint32_values)
  if (_internal_has_sint32_values()) {
    clear_has_values();
    ::CNTK::proto::NDArrayView_IntValues* temp = values_.sint32_values_;
    values_.sint32_values_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void NDArrayView::unsafe_arena_set_allocated_sint32_values(::CNTK::proto::NDArrayView_IntValues* sint32_values) {
  clear_values();
  if (sint32_values) {
    set_has_sint32_values();
    values_.sint32_values_ = sint32_values;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:CNTK.proto.NDArrayView.sint32_values)
}
inline ::CNTK::proto::NDArrayView_IntValues* NDArrayView::_internal_mutable_sint32_values() {
  if (!_internal_has_sint32_values()) {
    clear_values();
    set_has_sint32_values();
    values_.sint32_values_ = CreateMaybeMessage< ::CNTK::proto::NDArrayView_IntValues >(GetArena());
  }
  return values_.sint32_values_;
}
inline ::CNTK::proto::NDArrayView_IntValues* NDArrayView::mutable_sint32_values() {
  // @@protoc_insertion_point(field_mutable:CNTK.proto.NDArrayView.sint32_values)
  return _internal_mutable_sint32_values();
}

inline bool NDArrayView::has_values() const {
  return values_case() != VALUES_NOT_SET;
}
inline void NDArrayView::clear_has_values() {
  _oneof_case_[0] = VALUES_NOT_SET;
}
inline NDArrayView::ValuesCase NDArrayView::values_case() const {
  return NDArrayView::ValuesCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// Vector

// repeated .CNTK.proto.DictionaryValue value = 1;
inline int Vector::_internal_value_size() const {
  return value_.size();
}
inline int Vector::value_size() const {
  return _internal_value_size();
}
inline void Vector::clear_value() {
  value_.Clear();
}
inline ::CNTK::proto::DictionaryValue* Vector::mutable_value(int index) {
  // @@protoc_insertion_point(field_mutable:CNTK.proto.Vector.value)
  return value_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CNTK::proto::DictionaryValue >*
Vector::mutable_value() {
  // @@protoc_insertion_point(field_mutable_list:CNTK.proto.Vector.value)
  return &value_;
}
inline const ::CNTK::proto::DictionaryValue& Vector::_internal_value(int index) const {
  return value_.Get(index);
}
inline const ::CNTK::proto::DictionaryValue& Vector::value(int index) const {
  // @@protoc_insertion_point(field_get:CNTK.proto.Vector.value)
  return _internal_value(index);
}
inline ::CNTK::proto::DictionaryValue* Vector::_internal_add_value() {
  return value_.Add();
}
inline ::CNTK::proto::DictionaryValue* Vector::add_value() {
  // @@protoc_insertion_point(field_add:CNTK.proto.Vector.value)
  return _internal_add_value();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CNTK::proto::DictionaryValue >&
Vector::value() const {
  // @@protoc_insertion_point(field_list:CNTK.proto.Vector.value)
  return value_;
}

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// Dictionary

// uint64 version = 1;
inline void Dictionary::clear_version() {
  version_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Dictionary::_internal_version() const {
  return version_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Dictionary::version() const {
  // @@protoc_insertion_point(field_get:CNTK.proto.Dictionary.version)
  return _internal_version();
}
inline void Dictionary::_internal_set_version(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  version_ = value;
}
inline void Dictionary::set_version(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_version(value);
  // @@protoc_insertion_point(field_set:CNTK.proto.Dictionary.version)
}

// map<string, .CNTK.proto.DictionaryValue> data = 2;
inline int Dictionary::_internal_data_size() const {
  return data_.size();
}
inline int Dictionary::data_size() const {
  return _internal_data_size();
}
inline void Dictionary::clear_data() {
  data_.Clear();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::CNTK::proto::DictionaryValue >&
Dictionary::_internal_data() const {
  return data_.GetMap();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::CNTK::proto::DictionaryValue >&
Dictionary::data() const {
  // @@protoc_insertion_point(field_map:CNTK.proto.Dictionary.data)
  return _internal_data();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::CNTK::proto::DictionaryValue >*
Dictionary::_internal_mutable_data() {
  return data_.MutableMap();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::CNTK::proto::DictionaryValue >*
Dictionary::mutable_data() {
  // @@protoc_insertion_point(field_mutable_map:CNTK.proto.Dictionary.data)
  return _internal_mutable_data();
}

// -------------------------------------------------------------------

// DictionaryValue

// uint64 version = 1;
inline void DictionaryValue::clear_version() {
  version_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 DictionaryValue::_internal_version() const {
  return version_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 DictionaryValue::version() const {
  // @@protoc_insertion_point(field_get:CNTK.proto.DictionaryValue.version)
  return _internal_version();
}
inline void DictionaryValue::_internal_set_version(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  version_ = value;
}
inline void DictionaryValue::set_version(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_version(value);
  // @@protoc_insertion_point(field_set:CNTK.proto.DictionaryValue.version)
}

// .CNTK.proto.DictionaryValue.Type value_type = 2;
inline void DictionaryValue::clear_value_type() {
  value_type_ = 0;
}
inline ::CNTK::proto::DictionaryValue_Type DictionaryValue::_internal_value_type() const {
  return static_cast< ::CNTK::proto::DictionaryValue_Type >(value_type_);
}
inline ::CNTK::proto::DictionaryValue_Type DictionaryValue::value_type() const {
  // @@protoc_insertion_point(field_get:CNTK.proto.DictionaryValue.value_type)
  return _internal_value_type();
}
inline void DictionaryValue::_internal_set_value_type(::CNTK::proto::DictionaryValue_Type value) {
  
  value_type_ = value;
}
inline void DictionaryValue::set_value_type(::CNTK::proto::DictionaryValue_Type value) {
  _internal_set_value_type(value);
  // @@protoc_insertion_point(field_set:CNTK.proto.DictionaryValue.value_type)
}

// bool bool_value = 3;
inline bool DictionaryValue::_internal_has_bool_value() const {
  return value_case() == kBoolValue;
}
inline void DictionaryValue::set_has_bool_value() {
  _oneof_case_[0] = kBoolValue;
}
inline void DictionaryValue::clear_bool_value() {
  if (_internal_has_bool_value()) {
    value_.bool_value_ = false;
    clear_has_value();
  }
}
inline bool DictionaryValue::_internal_bool_value() const {
  if (_internal_has_bool_value()) {
    return value_.bool_value_;
  }
  return false;
}
inline void DictionaryValue::_internal_set_bool_value(bool value) {
  if (!_internal_has_bool_value()) {
    clear_value();
    set_has_bool_value();
  }
  value_.bool_value_ = value;
}
inline bool DictionaryValue::bool_value() const {
  // @@protoc_insertion_point(field_get:CNTK.proto.DictionaryValue.bool_value)
  return _internal_bool_value();
}
inline void DictionaryValue::set_bool_value(bool value) {
  _internal_set_bool_value(value);
  // @@protoc_insertion_point(field_set:CNTK.proto.DictionaryValue.bool_value)
}

// int32 int_value = 4;
inline bool DictionaryValue::_internal_has_int_value() const {
  return value_case() == kIntValue;
}
inline void DictionaryValue::set_has_int_value() {
  _oneof_case_[0] = kIntValue;
}
inline void DictionaryValue::clear_int_value() {
  if (_internal_has_int_value()) {
    value_.int_value_ = 0;
    clear_has_value();
  }
}
inline ::PROTOBUF_NAMESPACE_ID::int32 DictionaryValue::_internal_int_value() const {
  if (_internal_has_int_value()) {
    return value_.int_value_;
  }
  return 0;
}
inline void DictionaryValue::_internal_set_int_value(::PROTOBUF_NAMESPACE_ID::int32 value) {
  if (!_internal_has_int_value()) {
    clear_value();
    set_has_int_value();
  }
  value_.int_value_ = value;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 DictionaryValue::int_value() const {
  // @@protoc_insertion_point(field_get:CNTK.proto.DictionaryValue.int_value)
  return _internal_int_value();
}
inline void DictionaryValue::set_int_value(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_int_value(value);
  // @@protoc_insertion_point(field_set:CNTK.proto.DictionaryValue.int_value)
}

// uint64 size_t_value = 5;
inline bool DictionaryValue::_internal_has_size_t_value() const {
  return value_case() == kSizeTValue;
}
inline void DictionaryValue::set_has_size_t_value() {
  _oneof_case_[0] = kSizeTValue;
}
inline void DictionaryValue::clear_size_t_value() {
  if (_internal_has_size_t_value()) {
    value_.size_t_value_ = PROTOBUF_ULONGLONG(0);
    clear_has_value();
  }
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 DictionaryValue::_internal_size_t_value() const {
  if (_internal_has_size_t_value()) {
    return value_.size_t_value_;
  }
  return PROTOBUF_ULONGLONG(0);
}
inline void DictionaryValue::_internal_set_size_t_value(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  if (!_internal_has_size_t_value()) {
    clear_value();
    set_has_size_t_value();
  }
  value_.size_t_value_ = value;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 DictionaryValue::size_t_value() const {
  // @@protoc_insertion_point(field_get:CNTK.proto.DictionaryValue.size_t_value)
  return _internal_size_t_value();
}
inline void DictionaryValue::set_size_t_value(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_size_t_value(value);
  // @@protoc_insertion_point(field_set:CNTK.proto.DictionaryValue.size_t_value)
}

// float float_value = 6;
inline bool DictionaryValue::_internal_has_float_value() const {
  return value_case() == kFloatValue;
}
inline void DictionaryValue::set_has_float_value() {
  _oneof_case_[0] = kFloatValue;
}
inline void DictionaryValue::clear_float_value() {
  if (_internal_has_float_value()) {
    value_.float_value_ = 0;
    clear_has_value();
  }
}
inline float DictionaryValue::_internal_float_value() const {
  if (_internal_has_float_value()) {
    return value_.float_value_;
  }
  return 0;
}
inline void DictionaryValue::_internal_set_float_value(float value) {
  if (!_internal_has_float_value()) {
    clear_value();
    set_has_float_value();
  }
  value_.float_value_ = value;
}
inline float DictionaryValue::float_value() const {
  // @@protoc_insertion_point(field_get:CNTK.proto.DictionaryValue.float_value)
  return _internal_float_value();
}
inline void DictionaryValue::set_float_value(float value) {
  _internal_set_float_value(value);
  // @@protoc_insertion_point(field_set:CNTK.proto.DictionaryValue.float_value)
}

// double double_value = 7;
inline bool DictionaryValue::_internal_has_double_value() const {
  return value_case() == kDoubleValue;
}
inline void DictionaryValue::set_has_double_value() {
  _oneof_case_[0] = kDoubleValue;
}
inline void DictionaryValue::clear_double_value() {
  if (_internal_has_double_value()) {
    value_.double_value_ = 0;
    clear_has_value();
  }
}
inline double DictionaryValue::_internal_double_value() const {
  if (_internal_has_double_value()) {
    return value_.double_value_;
  }
  return 0;
}
inline void DictionaryValue::_internal_set_double_value(double value) {
  if (!_internal_has_double_value()) {
    clear_value();
    set_has_double_value();
  }
  value_.double_value_ = value;
}
inline double DictionaryValue::double_value() const {
  // @@protoc_insertion_point(field_get:CNTK.proto.DictionaryValue.double_value)
  return _internal_double_value();
}
inline void DictionaryValue::set_double_value(double value) {
  _internal_set_double_value(value);
  // @@protoc_insertion_point(field_set:CNTK.proto.DictionaryValue.double_value)
}

// string string_value = 8;
inline bool DictionaryValue::_internal_has_string_value() const {
  return value_case() == kStringValue;
}
inline void DictionaryValue::set_has_string_value() {
  _oneof_case_[0] = kStringValue;
}
inline void DictionaryValue::clear_string_value() {
  if (_internal_has_string_value()) {
    value_.string_value_.Destroy(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
    clear_has_value();
  }
}
inline const std::string& DictionaryValue::string_value() const {
  // @@protoc_insertion_point(field_get:CNTK.proto.DictionaryValue.string_value)
  return _internal_string_value();
}
inline void DictionaryValue::set_string_value(const std::string& value) {
  _internal_set_string_value(value);
  // @@protoc_insertion_point(field_set:CNTK.proto.DictionaryValue.string_value)
}
inline std::string* DictionaryValue::mutable_string_value() {
  // @@protoc_insertion_point(field_mutable:CNTK.proto.DictionaryValue.string_value)
  return _internal_mutable_string_value();
}
inline const std::string& DictionaryValue::_internal_string_value() const {
  if (_internal_has_string_value()) {
    return value_.string_value_.Get();
  }
  return ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited();
}
inline void DictionaryValue::_internal_set_string_value(const std::string& value) {
  if (!_internal_has_string_value()) {
    clear_value();
    set_has_string_value();
    value_.string_value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  value_.string_value_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void DictionaryValue::set_string_value(std::string&& value) {
  // @@protoc_insertion_point(field_set:CNTK.proto.DictionaryValue.string_value)
  if (!_internal_has_string_value()) {
    clear_value();
    set_has_string_value();
    value_.string_value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  value_.string_value_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:CNTK.proto.DictionaryValue.string_value)
}
inline void DictionaryValue::set_string_value(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  if (!_internal_has_string_value()) {
    clear_value();
    set_has_string_value();
    value_.string_value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  value_.string_value_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{},
      ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:CNTK.proto.DictionaryValue.string_value)
}
inline void DictionaryValue::set_string_value(const char* value,
                             size_t size) {
  if (!_internal_has_string_value()) {
    clear_value();
    set_has_string_value();
    value_.string_value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  value_.string_value_.Set(
      ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size),
      GetArena());
  // @@protoc_insertion_point(field_set_pointer:CNTK.proto.DictionaryValue.string_value)
}
inline std::string* DictionaryValue::_internal_mutable_string_value() {
  if (!_internal_has_string_value()) {
    clear_value();
    set_has_string_value();
    value_.string_value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  return value_.string_value_.Mutable(
      ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* DictionaryValue::release_string_value() {
  // @@protoc_insertion_point(field_release:CNTK.proto.DictionaryValue.string_value)
  if (_internal_has_string_value()) {
    clear_has_value();
    return value_.string_value_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  } else {
    return nullptr;
  }
}
inline void DictionaryValue::set_allocated_string_value(std::string* string_value) {
  if (has_value()) {
    clear_value();
  }
  if (string_value != nullptr) {
    set_has_string_value();
    value_.string_value_.UnsafeSetDefault(string_value);
    ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena();
    if (arena != nullptr) {
      arena->Own(string_value);
    }
  }
  // @@protoc_insertion_point(field_set_allocated:CNTK.proto.DictionaryValue.string_value)
}

// .CNTK.proto.NDShape nd_shape_value = 9;
inline bool DictionaryValue::_internal_has_nd_shape_value() const {
  return value_case() == kNdShapeValue;
}
inline bool DictionaryValue::has_nd_shape_value() const {
  return _internal_has_nd_shape_value();
}
inline void DictionaryValue::set_has_nd_shape_value() {
  _oneof_case_[0] = kNdShapeValue;
}
inline void DictionaryValue::clear_nd_shape_value() {
  if (_internal_has_nd_shape_value()) {
    if (GetArena() == nullptr) {
      delete value_.nd_shape_value_;
    }
    clear_has_value();
  }
}
inline ::CNTK::proto::NDShape* DictionaryValue::release_nd_shape_value() {
  // @@protoc_insertion_point(field_release:CNTK.proto.DictionaryValue.nd_shape_value)
  if (_internal_has_nd_shape_value()) {
    clear_has_value();
      ::CNTK::proto::NDShape* temp = value_.nd_shape_value_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    value_.nd_shape_value_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::CNTK::proto::NDShape& DictionaryValue::_internal_nd_shape_value() const {
  return _internal_has_nd_shape_value()
      ? *value_.nd_shape_value_
      : reinterpret_cast< ::CNTK::proto::NDShape&>(::CNTK::proto::_NDShape_default_instance_);
}
inline const ::CNTK::proto::NDShape& DictionaryValue::nd_shape_value() const {
  // @@protoc_insertion_point(field_get:CNTK.proto.DictionaryValue.nd_shape_value)
  return _internal_nd_shape_value();
}
inline ::CNTK::proto::NDShape* DictionaryValue::unsafe_arena_release_nd_shape_value() {
  // @@protoc_insertion_point(field_unsafe_arena_release:CNTK.proto.DictionaryValue.nd_shape_value)
  if (_internal_has_nd_shape_value()) {
    clear_has_value();
    ::CNTK::proto::NDShape* temp = value_.nd_shape_value_;
    value_.nd_shape_value_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void DictionaryValue::unsafe_arena_set_allocated_nd_shape_value(::CNTK::proto::NDShape* nd_shape_value) {
  clear_value();
  if (nd_shape_value) {
    set_has_nd_shape_value();
    value_.nd_shape_value_ = nd_shape_value;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:CNTK.proto.DictionaryValue.nd_shape_value)
}
inline ::CNTK::proto::NDShape* DictionaryValue::_internal_mutable_nd_shape_value() {
  if (!_internal_has_nd_shape_value()) {
    clear_value();
    set_has_nd_shape_value();
    value_.nd_shape_value_ = CreateMaybeMessage< ::CNTK::proto::NDShape >(GetArena());
  }
  return value_.nd_shape_value_;
}
inline ::CNTK::proto::NDShape* DictionaryValue::mutable_nd_shape_value() {
  // @@protoc_insertion_point(field_mutable:CNTK.proto.DictionaryValue.nd_shape_value)
  return _internal_mutable_nd_shape_value();
}

// .CNTK.proto.Axis axis_value = 10;
inline bool DictionaryValue::_internal_has_axis_value() const {
  return value_case() == kAxisValue;
}
inline bool DictionaryValue::has_axis_value() const {
  return _internal_has_axis_value();
}
inline void DictionaryValue::set_has_axis_value() {
  _oneof_case_[0] = kAxisValue;
}
inline void DictionaryValue::clear_axis_value() {
  if (_internal_has_axis_value()) {
    if (GetArena() == nullptr) {
      delete value_.axis_value_;
    }
    clear_has_value();
  }
}
inline ::CNTK::proto::Axis* DictionaryValue::release_axis_value() {
  // @@protoc_insertion_point(field_release:CNTK.proto.DictionaryValue.axis_value)
  if (_internal_has_axis_value()) {
    clear_has_value();
      ::CNTK::proto::Axis* temp = value_.axis_value_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    value_.axis_value_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::CNTK::proto::Axis& DictionaryValue::_internal_axis_value() const {
  return _internal_has_axis_value()
      ? *value_.axis_value_
      : reinterpret_cast< ::CNTK::proto::Axis&>(::CNTK::proto::_Axis_default_instance_);
}
inline const ::CNTK::proto::Axis& DictionaryValue::axis_value() const {
  // @@protoc_insertion_point(field_get:CNTK.proto.DictionaryValue.axis_value)
  return _internal_axis_value();
}
inline ::CNTK::proto::Axis* DictionaryValue::unsafe_arena_release_axis_value() {
  // @@protoc_insertion_point(field_unsafe_arena_release:CNTK.proto.DictionaryValue.axis_value)
  if (_internal_has_axis_value()) {
    clear_has_value();
    ::CNTK::proto::Axis* temp = value_.axis_value_;
    value_.axis_value_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void DictionaryValue::unsafe_arena_set_allocated_axis_value(::CNTK::proto::Axis* axis_value) {
  clear_value();
  if (axis_value) {
    set_has_axis_value();
    value_.axis_value_ = axis_value;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:CNTK.proto.DictionaryValue.axis_value)
}
inline ::CNTK::proto::Axis* DictionaryValue::_internal_mutable_axis_value() {
  if (!_internal_has_axis_value()) {
    clear_value();
    set_has_axis_value();
    value_.axis_value_ = CreateMaybeMessage< ::CNTK::proto::Axis >(GetArena());
  }
  return value_.axis_value_;
}
inline ::CNTK::proto::Axis* DictionaryValue::mutable_axis_value() {
  // @@protoc_insertion_point(field_mutable:CNTK.proto.DictionaryValue.axis_value)
  return _internal_mutable_axis_value();
}

// .CNTK.proto.Vector vector_value = 11;
inline bool DictionaryValue::_internal_has_vector_value() const {
  return value_case() == kVectorValue;
}
inline bool DictionaryValue::has_vector_value() const {
  return _internal_has_vector_value();
}
inline void DictionaryValue::set_has_vector_value() {
  _oneof_case_[0] = kVectorValue;
}
inline void DictionaryValue::clear_vector_value() {
  if (_internal_has_vector_value()) {
    if (GetArena() == nullptr) {
      delete value_.vector_value_;
    }
    clear_has_value();
  }
}
inline ::CNTK::proto::Vector* DictionaryValue::release_vector_value() {
  // @@protoc_insertion_point(field_release:CNTK.proto.DictionaryValue.vector_value)
  if (_internal_has_vector_value()) {
    clear_has_value();
      ::CNTK::proto::Vector* temp = value_.vector_value_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    value_.vector_value_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::CNTK::proto::Vector& DictionaryValue::_internal_vector_value() const {
  return _internal_has_vector_value()
      ? *value_.vector_value_
      : reinterpret_cast< ::CNTK::proto::Vector&>(::CNTK::proto::_Vector_default_instance_);
}
inline const ::CNTK::proto::Vector& DictionaryValue::vector_value() const {
  // @@protoc_insertion_point(field_get:CNTK.proto.DictionaryValue.vector_value)
  return _internal_vector_value();
}
inline ::CNTK::proto::Vector* DictionaryValue::unsafe_arena_release_vector_value() {
  // @@protoc_insertion_point(field_unsafe_arena_release:CNTK.proto.DictionaryValue.vector_value)
  if (_internal_has_vector_value()) {
    clear_has_value();
    ::CNTK::proto::Vector* temp = value_.vector_value_;
    value_.vector_value_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void DictionaryValue::unsafe_arena_set_allocated_vector_value(::CNTK::proto::Vector* vector_value) {
  clear_value();
  if (vector_value) {
    set_has_vector_value();
    value_.vector_value_ = vector_value;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:CNTK.proto.DictionaryValue.vector_value)
}
inline ::CNTK::proto::Vector* DictionaryValue::_internal_mutable_vector_value() {
  if (!_internal_has_vector_value()) {
    clear_value();
    set_has_vector_value();
    value_.vector_value_ = CreateMaybeMessage< ::CNTK::proto::Vector >(GetArena());
  }
  return value_.vector_value_;
}
inline ::CNTK::proto::Vector* DictionaryValue::mutable_vector_value() {
  // @@protoc_insertion_point(field_mutable:CNTK.proto.DictionaryValue.vector_value)
  return _internal_mutable_vector_value();
}

// .CNTK.proto.Dictionary dictionary_value = 12;
inline bool DictionaryValue::_internal_has_dictionary_value() const {
  return value_case() == kDictionaryValue;
}
inline bool DictionaryValue::has_dictionary_value() const {
  return _internal_has_dictionary_value();
}
inline void DictionaryValue::set_has_dictionary_value() {
  _oneof_case_[0] = kDictionaryValue;
}
inline void DictionaryValue::clear_dictionary_value() {
  if (_internal_has_dictionary_value()) {
    if (GetArena() == nullptr) {
      delete value_.dictionary_value_;
    }
    clear_has_value();
  }
}
inline ::CNTK::proto::Dictionary* DictionaryValue::release_dictionary_value() {
  // @@protoc_insertion_point(field_release:CNTK.proto.DictionaryValue.dictionary_value)
  if (_internal_has_dictionary_value()) {
    clear_has_value();
      ::CNTK::proto::Dictionary* temp = value_.dictionary_value_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    value_.dictionary_value_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::CNTK::proto::Dictionary& DictionaryValue::_internal_dictionary_value() const {
  return _internal_has_dictionary_value()
      ? *value_.dictionary_value_
      : reinterpret_cast< ::CNTK::proto::Dictionary&>(::CNTK::proto::_Dictionary_default_instance_);
}
inline const ::CNTK::proto::Dictionary& DictionaryValue::dictionary_value() const {
  // @@protoc_insertion_point(field_get:CNTK.proto.DictionaryValue.dictionary_value)
  return _internal_dictionary_value();
}
inline ::CNTK::proto::Dictionary* DictionaryValue::unsafe_arena_release_dictionary_value() {
  // @@protoc_insertion_point(field_unsafe_arena_release:CNTK.proto.DictionaryValue.dictionary_value)
  if (_internal_has_dictionary_value()) {
    clear_has_value();
    ::CNTK::proto::Dictionary* temp = value_.dictionary_value_;
    value_.dictionary_value_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void DictionaryValue::unsafe_arena_set_allocated_dictionary_value(::CNTK::proto::Dictionary* dictionary_value) {
  clear_value();
  if (dictionary_value) {
    set_has_dictionary_value();
    value_.dictionary_value_ = dictionary_value;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:CNTK.proto.DictionaryValue.dictionary_value)
}
inline ::CNTK::proto::Dictionary* DictionaryValue::_internal_mutable_dictionary_value() {
  if (!_internal_has_dictionary_value()) {
    clear_value();
    set_has_dictionary_value();
    value_.dictionary_value_ = CreateMaybeMessage< ::CNTK::proto::Dictionary >(GetArena());
  }
  return value_.dictionary_value_;
}
inline ::CNTK::proto::Dictionary* DictionaryValue::mutable_dictionary_value() {
  // @@protoc_insertion_point(field_mutable:CNTK.proto.DictionaryValue.dictionary_value)
  return _internal_mutable_dictionary_value();
}

// .CNTK.proto.NDArrayView nd_array_view_value = 13;
inline bool DictionaryValue::_internal_has_nd_array_view_value() const {
  return value_case() == kNdArrayViewValue;
}
inline bool DictionaryValue::has_nd_array_view_value() const {
  return _internal_has_nd_array_view_value();
}
inline void DictionaryValue::set_has_nd_array_view_value() {
  _oneof_case_[0] = kNdArrayViewValue;
}
inline void DictionaryValue::clear_nd_array_view_value() {
  if (_internal_has_nd_array_view_value()) {
    if (GetArena() == nullptr) {
      delete value_.nd_array_view_value_;
    }
    clear_has_value();
  }
}
inline ::CNTK::proto::NDArrayView* DictionaryValue::release_nd_array_view_value() {
  // @@protoc_insertion_point(field_release:CNTK.proto.DictionaryValue.nd_array_view_value)
  if (_internal_has_nd_array_view_value()) {
    clear_has_value();
      ::CNTK::proto::NDArrayView* temp = value_.nd_array_view_value_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    value_.nd_array_view_value_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::CNTK::proto::NDArrayView& DictionaryValue::_internal_nd_array_view_value() const {
  return _internal_has_nd_array_view_value()
      ? *value_.nd_array_view_value_
      : reinterpret_cast< ::CNTK::proto::NDArrayView&>(::CNTK::proto::_NDArrayView_default_instance_);
}
inline const ::CNTK::proto::NDArrayView& DictionaryValue::nd_array_view_value() const {
  // @@protoc_insertion_point(field_get:CNTK.proto.DictionaryValue.nd_array_view_value)
  return _internal_nd_array_view_value();
}
inline ::CNTK::proto::NDArrayView* DictionaryValue::unsafe_arena_release_nd_array_view_value() {
  // @@protoc_insertion_point(field_unsafe_arena_release:CNTK.proto.DictionaryValue.nd_array_view_value)
  if (_internal_has_nd_array_view_value()) {
    clear_has_value();
    ::CNTK::proto::NDArrayView* temp = value_.nd_array_view_value_;
    value_.nd_array_view_value_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void DictionaryValue::unsafe_arena_set_allocated_nd_array_view_value(::CNTK::proto::NDArrayView* nd_array_view_value) {
  clear_value();
  if (nd_array_view_value) {
    set_has_nd_array_view_value();
    value_.nd_array_view_value_ = nd_array_view_value;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:CNTK.proto.DictionaryValue.nd_array_view_value)
}
inline ::CNTK::proto::NDArrayView* DictionaryValue::_internal_mutable_nd_array_view_value() {
  if (!_internal_has_nd_array_view_value()) {
    clear_value();
    set_has_nd_array_view_value();
    value_.nd_array_view_value_ = CreateMaybeMessage< ::CNTK::proto::NDArrayView >(GetArena());
  }
  return value_.nd_array_view_value_;
}
inline ::CNTK::proto::NDArrayView* DictionaryValue::mutable_nd_array_view_value() {
  // @@protoc_insertion_point(field_mutable:CNTK.proto.DictionaryValue.nd_array_view_value)
  return _internal_mutable_nd_array_view_value();
}

inline bool DictionaryValue::has_value() const {
  return value_case() != VALUE_NOT_SET;
}
inline void DictionaryValue::clear_has_value() {
  _oneof_case_[0] = VALUE_NOT_SET;
}
inline DictionaryValue::ValueCase DictionaryValue::value_case() const {
  return DictionaryValue::ValueCase(_oneof_case_[0]);
}
#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace proto
}  // namespace CNTK

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::CNTK::proto::NDArrayView_DataType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::CNTK::proto::NDArrayView_DataType>() {
  return ::CNTK::proto::NDArrayView_DataType_descriptor();
}
template <> struct is_proto_enum< ::CNTK::proto::NDArrayView_StorageFormat> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::CNTK::proto::NDArrayView_StorageFormat>() {
  return ::CNTK::proto::NDArrayView_StorageFormat_descriptor();
}
template <> struct is_proto_enum< ::CNTK::proto::DictionaryValue_Type> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::CNTK::proto::DictionaryValue_Type>() {
  return ::CNTK::proto::DictionaryValue_Type_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_CNTK_2eproto
