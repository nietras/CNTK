// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: CNTK.proto

#include "CNTK.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_CNTK_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Axis_CNTK_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_CNTK_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_Dictionary_CNTK_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_CNTK_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<5> scc_info_NDArrayView_CNTK_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_CNTK_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_NDArrayView_BytesValue_CNTK_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_CNTK_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_NDArrayView_DoubleValues_CNTK_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_CNTK_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_NDArrayView_FloatValues_CNTK_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_CNTK_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_NDArrayView_IntValues_CNTK_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_CNTK_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_NDShape_CNTK_2eproto;
namespace CNTK {
namespace proto {
class NDShapeDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<NDShape> _instance;
} _NDShape_default_instance_;
class AxisDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Axis> _instance;
} _Axis_default_instance_;
class NDArrayView_FloatValuesDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<NDArrayView_FloatValues> _instance;
} _NDArrayView_FloatValues_default_instance_;
class NDArrayView_DoubleValuesDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<NDArrayView_DoubleValues> _instance;
} _NDArrayView_DoubleValues_default_instance_;
class NDArrayView_BytesValueDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<NDArrayView_BytesValue> _instance;
} _NDArrayView_BytesValue_default_instance_;
class NDArrayView_IntValuesDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<NDArrayView_IntValues> _instance;
} _NDArrayView_IntValues_default_instance_;
class NDArrayViewDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<NDArrayView> _instance;
} _NDArrayView_default_instance_;
class VectorDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Vector> _instance;
} _Vector_default_instance_;
class Dictionary_DataEntry_DoNotUseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Dictionary_DataEntry_DoNotUse> _instance;
} _Dictionary_DataEntry_DoNotUse_default_instance_;
class DictionaryDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Dictionary> _instance;
} _Dictionary_default_instance_;
class DictionaryValueDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<DictionaryValue> _instance;
} _DictionaryValue_default_instance_;
}  // namespace proto
}  // namespace CNTK
static void InitDefaultsscc_info_Axis_CNTK_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::CNTK::proto::_Axis_default_instance_;
    new (ptr) ::CNTK::proto::Axis();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Axis_CNTK_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_Axis_CNTK_2eproto}, {}};

static void InitDefaultsscc_info_Dictionary_CNTK_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::CNTK::proto::_Vector_default_instance_;
    new (ptr) ::CNTK::proto::Vector();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  {
    void* ptr = &::CNTK::proto::_Dictionary_DataEntry_DoNotUse_default_instance_;
    new (ptr) ::CNTK::proto::Dictionary_DataEntry_DoNotUse();
  }
  {
    void* ptr = &::CNTK::proto::_Dictionary_default_instance_;
    new (ptr) ::CNTK::proto::Dictionary();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  {
    void* ptr = &::CNTK::proto::_DictionaryValue_default_instance_;
    new (ptr) ::CNTK::proto::DictionaryValue();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_Dictionary_CNTK_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 3, 0, InitDefaultsscc_info_Dictionary_CNTK_2eproto}, {
      &scc_info_NDShape_CNTK_2eproto.base,
      &scc_info_Axis_CNTK_2eproto.base,
      &scc_info_NDArrayView_CNTK_2eproto.base,}};

static void InitDefaultsscc_info_NDArrayView_CNTK_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::CNTK::proto::_NDArrayView_default_instance_;
    new (ptr) ::CNTK::proto::NDArrayView();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<5> scc_info_NDArrayView_CNTK_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 5, 0, InitDefaultsscc_info_NDArrayView_CNTK_2eproto}, {
      &scc_info_NDShape_CNTK_2eproto.base,
      &scc_info_NDArrayView_FloatValues_CNTK_2eproto.base,
      &scc_info_NDArrayView_DoubleValues_CNTK_2eproto.base,
      &scc_info_NDArrayView_BytesValue_CNTK_2eproto.base,
      &scc_info_NDArrayView_IntValues_CNTK_2eproto.base,}};

static void InitDefaultsscc_info_NDArrayView_BytesValue_CNTK_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::CNTK::proto::_NDArrayView_BytesValue_default_instance_;
    new (ptr) ::CNTK::proto::NDArrayView_BytesValue();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_NDArrayView_BytesValue_CNTK_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_NDArrayView_BytesValue_CNTK_2eproto}, {}};

static void InitDefaultsscc_info_NDArrayView_DoubleValues_CNTK_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::CNTK::proto::_NDArrayView_DoubleValues_default_instance_;
    new (ptr) ::CNTK::proto::NDArrayView_DoubleValues();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_NDArrayView_DoubleValues_CNTK_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_NDArrayView_DoubleValues_CNTK_2eproto}, {}};

static void InitDefaultsscc_info_NDArrayView_FloatValues_CNTK_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::CNTK::proto::_NDArrayView_FloatValues_default_instance_;
    new (ptr) ::CNTK::proto::NDArrayView_FloatValues();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_NDArrayView_FloatValues_CNTK_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_NDArrayView_FloatValues_CNTK_2eproto}, {}};

static void InitDefaultsscc_info_NDArrayView_IntValues_CNTK_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::CNTK::proto::_NDArrayView_IntValues_default_instance_;
    new (ptr) ::CNTK::proto::NDArrayView_IntValues();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_NDArrayView_IntValues_CNTK_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_NDArrayView_IntValues_CNTK_2eproto}, {}};

static void InitDefaultsscc_info_NDShape_CNTK_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::CNTK::proto::_NDShape_default_instance_;
    new (ptr) ::CNTK::proto::NDShape();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_NDShape_CNTK_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_NDShape_CNTK_2eproto}, {}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_CNTK_2eproto[11];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_CNTK_2eproto[3];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_CNTK_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_CNTK_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::CNTK::proto::NDShape, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CNTK::proto::NDShape, shape_dim_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::CNTK::proto::Axis, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CNTK::proto::Axis, static_axis_idx_),
  PROTOBUF_FIELD_OFFSET(::CNTK::proto::Axis, name_),
  PROTOBUF_FIELD_OFFSET(::CNTK::proto::Axis, is_ordered_dynamic_axis_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::CNTK::proto::NDArrayView_FloatValues, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CNTK::proto::NDArrayView_FloatValues, value_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::CNTK::proto::NDArrayView_DoubleValues, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CNTK::proto::NDArrayView_DoubleValues, value_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::CNTK::proto::NDArrayView_BytesValue, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CNTK::proto::NDArrayView_BytesValue, value_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::CNTK::proto::NDArrayView_IntValues, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CNTK::proto::NDArrayView_IntValues, value_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::CNTK::proto::NDArrayView, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::CNTK::proto::NDArrayView, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CNTK::proto::NDArrayView, data_type_),
  PROTOBUF_FIELD_OFFSET(::CNTK::proto::NDArrayView, storage_format_),
  PROTOBUF_FIELD_OFFSET(::CNTK::proto::NDArrayView, shape_),
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  PROTOBUF_FIELD_OFFSET(::CNTK::proto::NDArrayView, values_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::CNTK::proto::Vector, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CNTK::proto::Vector, value_),
  PROTOBUF_FIELD_OFFSET(::CNTK::proto::Dictionary_DataEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CNTK::proto::Dictionary_DataEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CNTK::proto::Dictionary_DataEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::CNTK::proto::Dictionary_DataEntry_DoNotUse, value_),
  0,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::CNTK::proto::Dictionary, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CNTK::proto::Dictionary, version_),
  PROTOBUF_FIELD_OFFSET(::CNTK::proto::Dictionary, data_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::CNTK::proto::DictionaryValue, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::CNTK::proto::DictionaryValue, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CNTK::proto::DictionaryValue, version_),
  PROTOBUF_FIELD_OFFSET(::CNTK::proto::DictionaryValue, value_type_),
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  PROTOBUF_FIELD_OFFSET(::CNTK::proto::DictionaryValue, value_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::CNTK::proto::NDShape)},
  { 6, -1, sizeof(::CNTK::proto::Axis)},
  { 14, -1, sizeof(::CNTK::proto::NDArrayView_FloatValues)},
  { 20, -1, sizeof(::CNTK::proto::NDArrayView_DoubleValues)},
  { 26, -1, sizeof(::CNTK::proto::NDArrayView_BytesValue)},
  { 32, -1, sizeof(::CNTK::proto::NDArrayView_IntValues)},
  { 38, -1, sizeof(::CNTK::proto::NDArrayView)},
  { 51, -1, sizeof(::CNTK::proto::Vector)},
  { 57, 64, sizeof(::CNTK::proto::Dictionary_DataEntry_DoNotUse)},
  { 66, -1, sizeof(::CNTK::proto::Dictionary)},
  { 73, -1, sizeof(::CNTK::proto::DictionaryValue)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::CNTK::proto::_NDShape_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::CNTK::proto::_Axis_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::CNTK::proto::_NDArrayView_FloatValues_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::CNTK::proto::_NDArrayView_DoubleValues_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::CNTK::proto::_NDArrayView_BytesValue_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::CNTK::proto::_NDArrayView_IntValues_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::CNTK::proto::_NDArrayView_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::CNTK::proto::_Vector_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::CNTK::proto::_Dictionary_DataEntry_DoNotUse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::CNTK::proto::_Dictionary_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::CNTK::proto::_DictionaryValue_default_instance_),
};

const char descriptor_table_protodef_CNTK_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\nCNTK.proto\022\nCNTK.proto\" \n\007NDShape\022\025\n\ts"
  "hape_dim\030\001 \003(\004B\002\020\001\"N\n\004Axis\022\027\n\017static_axi"
  "s_idx\030\001 \001(\005\022\014\n\004name\030\002 \001(\t\022\037\n\027is_ordered_"
  "dynamic_axis\030\003 \001(\010\"\265\005\n\013NDArrayView\0223\n\tda"
  "ta_type\030\001 \001(\0162 .CNTK.proto.NDArrayView.D"
  "ataType\022=\n\016storage_format\030\002 \001(\0162%.CNTK.p"
  "roto.NDArrayView.StorageFormat\022\"\n\005shape\030"
  "\003 \001(\0132\023.CNTK.proto.NDShape\022;\n\014float_valu"
  "es\030\004 \001(\0132#.CNTK.proto.NDArrayView.FloatV"
  "aluesH\000\022=\n\rdouble_values\030\005 \001(\0132$.CNTK.pr"
  "oto.NDArrayView.DoubleValuesH\000\0229\n\013bytes_"
  "value\030\006 \001(\0132\".CNTK.proto.NDArrayView.Byt"
  "esValueH\000\022:\n\rsint32_values\030\007 \001(\0132!.CNTK."
  "proto.NDArrayView.IntValuesH\000\032 \n\013FloatVa"
  "lues\022\021\n\005value\030\001 \003(\002B\002\020\001\032!\n\014DoubleValues\022"
  "\021\n\005value\030\001 \003(\001B\002\020\001\032\033\n\nBytesValue\022\r\n\005valu"
  "e\030\001 \001(\014\032\036\n\tIntValues\022\021\n\005value\030\001 \003(\021B\002\020\001\""
  "P\n\010DataType\022\013\n\007Unknown\020\000\022\t\n\005Float\020\001\022\n\n\006D"
  "ouble\020\002\022\013\n\007Float16\020\004\022\010\n\004Int8\020\005\022\t\n\005Int16\020"
  "\006\"=\n\rStorageFormat\022\t\n\005Dense\020\000\022\r\n\tSparseC"
  "SC\020\001\022\022\n\016SparseBlockCol\020\002B\010\n\006values\"4\n\006Ve"
  "ctor\022*\n\005value\030\001 \003(\0132\033.CNTK.proto.Diction"
  "aryValue\"\227\001\n\nDictionary\022\017\n\007version\030\001 \001(\004"
  "\022.\n\004data\030\002 \003(\0132 .CNTK.proto.Dictionary.D"
  "ataEntry\032H\n\tDataEntry\022\013\n\003key\030\001 \001(\t\022*\n\005va"
  "lue\030\002 \001(\0132\033.CNTK.proto.DictionaryValue:\002"
  "8\001\"\362\004\n\017DictionaryValue\022\017\n\007version\030\001 \001(\004\022"
  "4\n\nvalue_type\030\002 \001(\0162 .CNTK.proto.Diction"
  "aryValue.Type\022\024\n\nbool_value\030\003 \001(\010H\000\022\023\n\ti"
  "nt_value\030\004 \001(\005H\000\022\026\n\014size_t_value\030\005 \001(\004H\000"
  "\022\025\n\013float_value\030\006 \001(\002H\000\022\026\n\014double_value\030"
  "\007 \001(\001H\000\022\026\n\014string_value\030\010 \001(\tH\000\022-\n\016nd_sh"
  "ape_value\030\t \001(\0132\023.CNTK.proto.NDShapeH\000\022&"
  "\n\naxis_value\030\n \001(\0132\020.CNTK.proto.AxisH\000\022*"
  "\n\014vector_value\030\013 \001(\0132\022.CNTK.proto.Vector"
  "H\000\0222\n\020dictionary_value\030\014 \001(\0132\026.CNTK.prot"
  "o.DictionaryH\000\0226\n\023nd_array_view_value\030\r "
  "\001(\0132\027.CNTK.proto.NDArrayViewH\000\"\225\001\n\004Type\022"
  "\010\n\004None\020\000\022\010\n\004Bool\020\001\022\007\n\003Int\020\002\022\t\n\005SizeT\020\003\022"
  "\t\n\005Float\020\004\022\n\n\006Double\020\005\022\n\n\006String\020\006\022\013\n\007ND"
  "Shape\020\007\022\010\n\004Axis\020\010\022\n\n\006Vector\020\t\022\016\n\nDiction"
  "ary\020\n\022\017\n\013NDArrayView\020\013B\007\n\005valueB\003\370\001\001b\006pr"
  "oto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_CNTK_2eproto_deps[1] = {
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_CNTK_2eproto_sccs[8] = {
  &scc_info_Axis_CNTK_2eproto.base,
  &scc_info_Dictionary_CNTK_2eproto.base,
  &scc_info_NDArrayView_CNTK_2eproto.base,
  &scc_info_NDArrayView_BytesValue_CNTK_2eproto.base,
  &scc_info_NDArrayView_DoubleValues_CNTK_2eproto.base,
  &scc_info_NDArrayView_FloatValues_CNTK_2eproto.base,
  &scc_info_NDArrayView_IntValues_CNTK_2eproto.base,
  &scc_info_NDShape_CNTK_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_CNTK_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_CNTK_2eproto = {
  false, false, descriptor_table_protodef_CNTK_2eproto, "CNTK.proto", 1684,
  &descriptor_table_CNTK_2eproto_once, descriptor_table_CNTK_2eproto_sccs, descriptor_table_CNTK_2eproto_deps, 8, 0,
  schemas, file_default_instances, TableStruct_CNTK_2eproto::offsets,
  file_level_metadata_CNTK_2eproto, 11, file_level_enum_descriptors_CNTK_2eproto, file_level_service_descriptors_CNTK_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_CNTK_2eproto = (static_cast<void>(::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_CNTK_2eproto)), true);
namespace CNTK {
namespace proto {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* NDArrayView_DataType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_CNTK_2eproto);
  return file_level_enum_descriptors_CNTK_2eproto[0];
}
bool NDArrayView_DataType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 4:
    case 5:
    case 6:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr NDArrayView_DataType NDArrayView::Unknown;
constexpr NDArrayView_DataType NDArrayView::Float;
constexpr NDArrayView_DataType NDArrayView::Double;
constexpr NDArrayView_DataType NDArrayView::Float16;
constexpr NDArrayView_DataType NDArrayView::Int8;
constexpr NDArrayView_DataType NDArrayView::Int16;
constexpr NDArrayView_DataType NDArrayView::DataType_MIN;
constexpr NDArrayView_DataType NDArrayView::DataType_MAX;
constexpr int NDArrayView::DataType_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* NDArrayView_StorageFormat_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_CNTK_2eproto);
  return file_level_enum_descriptors_CNTK_2eproto[1];
}
bool NDArrayView_StorageFormat_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr NDArrayView_StorageFormat NDArrayView::Dense;
constexpr NDArrayView_StorageFormat NDArrayView::SparseCSC;
constexpr NDArrayView_StorageFormat NDArrayView::SparseBlockCol;
constexpr NDArrayView_StorageFormat NDArrayView::StorageFormat_MIN;
constexpr NDArrayView_StorageFormat NDArrayView::StorageFormat_MAX;
constexpr int NDArrayView::StorageFormat_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* DictionaryValue_Type_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_CNTK_2eproto);
  return file_level_enum_descriptors_CNTK_2eproto[2];
}
bool DictionaryValue_Type_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr DictionaryValue_Type DictionaryValue::None;
constexpr DictionaryValue_Type DictionaryValue::Bool;
constexpr DictionaryValue_Type DictionaryValue::Int;
constexpr DictionaryValue_Type DictionaryValue::SizeT;
constexpr DictionaryValue_Type DictionaryValue::Float;
constexpr DictionaryValue_Type DictionaryValue::Double;
constexpr DictionaryValue_Type DictionaryValue::String;
constexpr DictionaryValue_Type DictionaryValue::NDShape;
constexpr DictionaryValue_Type DictionaryValue::Axis;
constexpr DictionaryValue_Type DictionaryValue::Vector;
constexpr DictionaryValue_Type DictionaryValue::Dictionary;
constexpr DictionaryValue_Type DictionaryValue::NDArrayView;
constexpr DictionaryValue_Type DictionaryValue::Type_MIN;
constexpr DictionaryValue_Type DictionaryValue::Type_MAX;
constexpr int DictionaryValue::Type_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)

// ===================================================================

class NDShape::_Internal {
 public:
};

NDShape::NDShape(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  shape_dim_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CNTK.proto.NDShape)
}
NDShape::NDShape(const NDShape& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      shape_dim_(from.shape_dim_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:CNTK.proto.NDShape)
}

void NDShape::SharedCtor() {
}

NDShape::~NDShape() {
  // @@protoc_insertion_point(destructor:CNTK.proto.NDShape)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void NDShape::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void NDShape::ArenaDtor(void* object) {
  NDShape* _this = reinterpret_cast< NDShape* >(object);
  (void)_this;
}
void NDShape::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void NDShape::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const NDShape& NDShape::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_NDShape_CNTK_2eproto.base);
  return *internal_default_instance();
}


void NDShape::Clear() {
// @@protoc_insertion_point(message_clear_start:CNTK.proto.NDShape)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  shape_dim_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* NDShape::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated uint64 shape_dim = 1 [packed = true];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt64Parser(_internal_mutable_shape_dim(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8) {
          _internal_add_shape_dim(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* NDShape::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CNTK.proto.NDShape)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated uint64 shape_dim = 1 [packed = true];
  {
    int byte_size = _shape_dim_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteUInt64Packed(
          1, _internal_shape_dim(), byte_size, target);
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CNTK.proto.NDShape)
  return target;
}

size_t NDShape::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CNTK.proto.NDShape)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated uint64 shape_dim = 1 [packed = true];
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      UInt64Size(this->shape_dim_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _shape_dim_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void NDShape::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CNTK.proto.NDShape)
  GOOGLE_DCHECK_NE(&from, this);
  const NDShape* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<NDShape>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CNTK.proto.NDShape)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CNTK.proto.NDShape)
    MergeFrom(*source);
  }
}

void NDShape::MergeFrom(const NDShape& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CNTK.proto.NDShape)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  shape_dim_.MergeFrom(from.shape_dim_);
}

void NDShape::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CNTK.proto.NDShape)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NDShape::CopyFrom(const NDShape& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CNTK.proto.NDShape)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NDShape::IsInitialized() const {
  return true;
}

void NDShape::InternalSwap(NDShape* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  shape_dim_.InternalSwap(&other->shape_dim_);
}

::PROTOBUF_NAMESPACE_ID::Metadata NDShape::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class Axis::_Internal {
 public:
};

Axis::Axis(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CNTK.proto.Axis)
}
Axis::Axis(const Axis& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_name().empty()) {
    name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_name(), 
      GetArena());
  }
  ::memcpy(&static_axis_idx_, &from.static_axis_idx_,
    static_cast<size_t>(reinterpret_cast<char*>(&is_ordered_dynamic_axis_) -
    reinterpret_cast<char*>(&static_axis_idx_)) + sizeof(is_ordered_dynamic_axis_));
  // @@protoc_insertion_point(copy_constructor:CNTK.proto.Axis)
}

void Axis::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Axis_CNTK_2eproto.base);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&static_axis_idx_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&is_ordered_dynamic_axis_) -
      reinterpret_cast<char*>(&static_axis_idx_)) + sizeof(is_ordered_dynamic_axis_));
}

Axis::~Axis() {
  // @@protoc_insertion_point(destructor:CNTK.proto.Axis)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Axis::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void Axis::ArenaDtor(void* object) {
  Axis* _this = reinterpret_cast< Axis* >(object);
  (void)_this;
}
void Axis::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Axis::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Axis& Axis::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Axis_CNTK_2eproto.base);
  return *internal_default_instance();
}


void Axis::Clear() {
// @@protoc_insertion_point(message_clear_start:CNTK.proto.Axis)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  name_.ClearToEmpty();
  ::memset(&static_axis_idx_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&is_ordered_dynamic_axis_) -
      reinterpret_cast<char*>(&static_axis_idx_)) + sizeof(is_ordered_dynamic_axis_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Axis::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 static_axis_idx = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          static_axis_idx_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CNTK.proto.Axis.name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool is_ordered_dynamic_axis = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          is_ordered_dynamic_axis_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Axis::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CNTK.proto.Axis)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 static_axis_idx = 1;
  if (this->static_axis_idx() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_static_axis_idx(), target);
  }

  // string name = 2;
  if (this->name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "CNTK.proto.Axis.name");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_name(), target);
  }

  // bool is_ordered_dynamic_axis = 3;
  if (this->is_ordered_dynamic_axis() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(3, this->_internal_is_ordered_dynamic_axis(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CNTK.proto.Axis)
  return target;
}

size_t Axis::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CNTK.proto.Axis)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string name = 2;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  // int32 static_axis_idx = 1;
  if (this->static_axis_idx() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_static_axis_idx());
  }

  // bool is_ordered_dynamic_axis = 3;
  if (this->is_ordered_dynamic_axis() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Axis::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CNTK.proto.Axis)
  GOOGLE_DCHECK_NE(&from, this);
  const Axis* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Axis>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CNTK.proto.Axis)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CNTK.proto.Axis)
    MergeFrom(*source);
  }
}

void Axis::MergeFrom(const Axis& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CNTK.proto.Axis)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.name().size() > 0) {
    _internal_set_name(from._internal_name());
  }
  if (from.static_axis_idx() != 0) {
    _internal_set_static_axis_idx(from._internal_static_axis_idx());
  }
  if (from.is_ordered_dynamic_axis() != 0) {
    _internal_set_is_ordered_dynamic_axis(from._internal_is_ordered_dynamic_axis());
  }
}

void Axis::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CNTK.proto.Axis)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Axis::CopyFrom(const Axis& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CNTK.proto.Axis)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Axis::IsInitialized() const {
  return true;
}

void Axis::InternalSwap(Axis* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  name_.Swap(&other->name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Axis, is_ordered_dynamic_axis_)
      + sizeof(Axis::is_ordered_dynamic_axis_)
      - PROTOBUF_FIELD_OFFSET(Axis, static_axis_idx_)>(
          reinterpret_cast<char*>(&static_axis_idx_),
          reinterpret_cast<char*>(&other->static_axis_idx_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Axis::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class NDArrayView_FloatValues::_Internal {
 public:
};

NDArrayView_FloatValues::NDArrayView_FloatValues(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  value_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CNTK.proto.NDArrayView.FloatValues)
}
NDArrayView_FloatValues::NDArrayView_FloatValues(const NDArrayView_FloatValues& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      value_(from.value_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:CNTK.proto.NDArrayView.FloatValues)
}

void NDArrayView_FloatValues::SharedCtor() {
}

NDArrayView_FloatValues::~NDArrayView_FloatValues() {
  // @@protoc_insertion_point(destructor:CNTK.proto.NDArrayView.FloatValues)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void NDArrayView_FloatValues::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void NDArrayView_FloatValues::ArenaDtor(void* object) {
  NDArrayView_FloatValues* _this = reinterpret_cast< NDArrayView_FloatValues* >(object);
  (void)_this;
}
void NDArrayView_FloatValues::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void NDArrayView_FloatValues::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const NDArrayView_FloatValues& NDArrayView_FloatValues::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_NDArrayView_FloatValues_CNTK_2eproto.base);
  return *internal_default_instance();
}


void NDArrayView_FloatValues::Clear() {
// @@protoc_insertion_point(message_clear_start:CNTK.proto.NDArrayView.FloatValues)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  value_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* NDArrayView_FloatValues::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated float value = 1 [packed = true];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedFloatParser(_internal_mutable_value(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 13) {
          _internal_add_value(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr));
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* NDArrayView_FloatValues::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CNTK.proto.NDArrayView.FloatValues)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated float value = 1 [packed = true];
  if (this->_internal_value_size() > 0) {
    target = stream->WriteFixedPacked(1, _internal_value(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CNTK.proto.NDArrayView.FloatValues)
  return target;
}

size_t NDArrayView_FloatValues::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CNTK.proto.NDArrayView.FloatValues)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated float value = 1 [packed = true];
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_value_size());
    size_t data_size = 4UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _value_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void NDArrayView_FloatValues::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CNTK.proto.NDArrayView.FloatValues)
  GOOGLE_DCHECK_NE(&from, this);
  const NDArrayView_FloatValues* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<NDArrayView_FloatValues>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CNTK.proto.NDArrayView.FloatValues)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CNTK.proto.NDArrayView.FloatValues)
    MergeFrom(*source);
  }
}

void NDArrayView_FloatValues::MergeFrom(const NDArrayView_FloatValues& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CNTK.proto.NDArrayView.FloatValues)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  value_.MergeFrom(from.value_);
}

void NDArrayView_FloatValues::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CNTK.proto.NDArrayView.FloatValues)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NDArrayView_FloatValues::CopyFrom(const NDArrayView_FloatValues& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CNTK.proto.NDArrayView.FloatValues)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NDArrayView_FloatValues::IsInitialized() const {
  return true;
}

void NDArrayView_FloatValues::InternalSwap(NDArrayView_FloatValues* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  value_.InternalSwap(&other->value_);
}

::PROTOBUF_NAMESPACE_ID::Metadata NDArrayView_FloatValues::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class NDArrayView_DoubleValues::_Internal {
 public:
};

NDArrayView_DoubleValues::NDArrayView_DoubleValues(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  value_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CNTK.proto.NDArrayView.DoubleValues)
}
NDArrayView_DoubleValues::NDArrayView_DoubleValues(const NDArrayView_DoubleValues& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      value_(from.value_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:CNTK.proto.NDArrayView.DoubleValues)
}

void NDArrayView_DoubleValues::SharedCtor() {
}

NDArrayView_DoubleValues::~NDArrayView_DoubleValues() {
  // @@protoc_insertion_point(destructor:CNTK.proto.NDArrayView.DoubleValues)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void NDArrayView_DoubleValues::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void NDArrayView_DoubleValues::ArenaDtor(void* object) {
  NDArrayView_DoubleValues* _this = reinterpret_cast< NDArrayView_DoubleValues* >(object);
  (void)_this;
}
void NDArrayView_DoubleValues::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void NDArrayView_DoubleValues::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const NDArrayView_DoubleValues& NDArrayView_DoubleValues::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_NDArrayView_DoubleValues_CNTK_2eproto.base);
  return *internal_default_instance();
}


void NDArrayView_DoubleValues::Clear() {
// @@protoc_insertion_point(message_clear_start:CNTK.proto.NDArrayView.DoubleValues)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  value_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* NDArrayView_DoubleValues::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated double value = 1 [packed = true];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedDoubleParser(_internal_mutable_value(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 9) {
          _internal_add_value(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr));
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* NDArrayView_DoubleValues::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CNTK.proto.NDArrayView.DoubleValues)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated double value = 1 [packed = true];
  if (this->_internal_value_size() > 0) {
    target = stream->WriteFixedPacked(1, _internal_value(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CNTK.proto.NDArrayView.DoubleValues)
  return target;
}

size_t NDArrayView_DoubleValues::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CNTK.proto.NDArrayView.DoubleValues)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated double value = 1 [packed = true];
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_value_size());
    size_t data_size = 8UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _value_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void NDArrayView_DoubleValues::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CNTK.proto.NDArrayView.DoubleValues)
  GOOGLE_DCHECK_NE(&from, this);
  const NDArrayView_DoubleValues* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<NDArrayView_DoubleValues>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CNTK.proto.NDArrayView.DoubleValues)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CNTK.proto.NDArrayView.DoubleValues)
    MergeFrom(*source);
  }
}

void NDArrayView_DoubleValues::MergeFrom(const NDArrayView_DoubleValues& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CNTK.proto.NDArrayView.DoubleValues)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  value_.MergeFrom(from.value_);
}

void NDArrayView_DoubleValues::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CNTK.proto.NDArrayView.DoubleValues)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NDArrayView_DoubleValues::CopyFrom(const NDArrayView_DoubleValues& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CNTK.proto.NDArrayView.DoubleValues)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NDArrayView_DoubleValues::IsInitialized() const {
  return true;
}

void NDArrayView_DoubleValues::InternalSwap(NDArrayView_DoubleValues* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  value_.InternalSwap(&other->value_);
}

::PROTOBUF_NAMESPACE_ID::Metadata NDArrayView_DoubleValues::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class NDArrayView_BytesValue::_Internal {
 public:
};

NDArrayView_BytesValue::NDArrayView_BytesValue(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CNTK.proto.NDArrayView.BytesValue)
}
NDArrayView_BytesValue::NDArrayView_BytesValue(const NDArrayView_BytesValue& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_value().empty()) {
    value_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_value(), 
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:CNTK.proto.NDArrayView.BytesValue)
}

void NDArrayView_BytesValue::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_NDArrayView_BytesValue_CNTK_2eproto.base);
  value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

NDArrayView_BytesValue::~NDArrayView_BytesValue() {
  // @@protoc_insertion_point(destructor:CNTK.proto.NDArrayView.BytesValue)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void NDArrayView_BytesValue::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  value_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void NDArrayView_BytesValue::ArenaDtor(void* object) {
  NDArrayView_BytesValue* _this = reinterpret_cast< NDArrayView_BytesValue* >(object);
  (void)_this;
}
void NDArrayView_BytesValue::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void NDArrayView_BytesValue::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const NDArrayView_BytesValue& NDArrayView_BytesValue::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_NDArrayView_BytesValue_CNTK_2eproto.base);
  return *internal_default_instance();
}


void NDArrayView_BytesValue::Clear() {
// @@protoc_insertion_point(message_clear_start:CNTK.proto.NDArrayView.BytesValue)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  value_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* NDArrayView_BytesValue::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // bytes value = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_value();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* NDArrayView_BytesValue::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CNTK.proto.NDArrayView.BytesValue)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes value = 1;
  if (this->value().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_value(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CNTK.proto.NDArrayView.BytesValue)
  return target;
}

size_t NDArrayView_BytesValue::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CNTK.proto.NDArrayView.BytesValue)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes value = 1;
  if (this->value().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_value());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void NDArrayView_BytesValue::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CNTK.proto.NDArrayView.BytesValue)
  GOOGLE_DCHECK_NE(&from, this);
  const NDArrayView_BytesValue* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<NDArrayView_BytesValue>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CNTK.proto.NDArrayView.BytesValue)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CNTK.proto.NDArrayView.BytesValue)
    MergeFrom(*source);
  }
}

void NDArrayView_BytesValue::MergeFrom(const NDArrayView_BytesValue& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CNTK.proto.NDArrayView.BytesValue)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.value().size() > 0) {
    _internal_set_value(from._internal_value());
  }
}

void NDArrayView_BytesValue::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CNTK.proto.NDArrayView.BytesValue)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NDArrayView_BytesValue::CopyFrom(const NDArrayView_BytesValue& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CNTK.proto.NDArrayView.BytesValue)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NDArrayView_BytesValue::IsInitialized() const {
  return true;
}

void NDArrayView_BytesValue::InternalSwap(NDArrayView_BytesValue* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  value_.Swap(&other->value_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata NDArrayView_BytesValue::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class NDArrayView_IntValues::_Internal {
 public:
};

NDArrayView_IntValues::NDArrayView_IntValues(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  value_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CNTK.proto.NDArrayView.IntValues)
}
NDArrayView_IntValues::NDArrayView_IntValues(const NDArrayView_IntValues& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      value_(from.value_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:CNTK.proto.NDArrayView.IntValues)
}

void NDArrayView_IntValues::SharedCtor() {
}

NDArrayView_IntValues::~NDArrayView_IntValues() {
  // @@protoc_insertion_point(destructor:CNTK.proto.NDArrayView.IntValues)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void NDArrayView_IntValues::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void NDArrayView_IntValues::ArenaDtor(void* object) {
  NDArrayView_IntValues* _this = reinterpret_cast< NDArrayView_IntValues* >(object);
  (void)_this;
}
void NDArrayView_IntValues::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void NDArrayView_IntValues::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const NDArrayView_IntValues& NDArrayView_IntValues::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_NDArrayView_IntValues_CNTK_2eproto.base);
  return *internal_default_instance();
}


void NDArrayView_IntValues::Clear() {
// @@protoc_insertion_point(message_clear_start:CNTK.proto.NDArrayView.IntValues)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  value_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* NDArrayView_IntValues::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated sint32 value = 1 [packed = true];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedSInt32Parser(_internal_mutable_value(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8) {
          _internal_add_value(::PROTOBUF_NAMESPACE_ID::internal::ReadVarintZigZag32(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* NDArrayView_IntValues::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CNTK.proto.NDArrayView.IntValues)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated sint32 value = 1 [packed = true];
  {
    int byte_size = _value_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteSInt32Packed(
          1, _internal_value(), byte_size, target);
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CNTK.proto.NDArrayView.IntValues)
  return target;
}

size_t NDArrayView_IntValues::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CNTK.proto.NDArrayView.IntValues)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated sint32 value = 1 [packed = true];
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      SInt32Size(this->value_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _value_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void NDArrayView_IntValues::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CNTK.proto.NDArrayView.IntValues)
  GOOGLE_DCHECK_NE(&from, this);
  const NDArrayView_IntValues* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<NDArrayView_IntValues>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CNTK.proto.NDArrayView.IntValues)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CNTK.proto.NDArrayView.IntValues)
    MergeFrom(*source);
  }
}

void NDArrayView_IntValues::MergeFrom(const NDArrayView_IntValues& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CNTK.proto.NDArrayView.IntValues)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  value_.MergeFrom(from.value_);
}

void NDArrayView_IntValues::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CNTK.proto.NDArrayView.IntValues)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NDArrayView_IntValues::CopyFrom(const NDArrayView_IntValues& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CNTK.proto.NDArrayView.IntValues)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NDArrayView_IntValues::IsInitialized() const {
  return true;
}

void NDArrayView_IntValues::InternalSwap(NDArrayView_IntValues* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  value_.InternalSwap(&other->value_);
}

::PROTOBUF_NAMESPACE_ID::Metadata NDArrayView_IntValues::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class NDArrayView::_Internal {
 public:
  static const ::CNTK::proto::NDShape& shape(const NDArrayView* msg);
  static const ::CNTK::proto::NDArrayView_FloatValues& float_values(const NDArrayView* msg);
  static const ::CNTK::proto::NDArrayView_DoubleValues& double_values(const NDArrayView* msg);
  static const ::CNTK::proto::NDArrayView_BytesValue& bytes_value(const NDArrayView* msg);
  static const ::CNTK::proto::NDArrayView_IntValues& sint32_values(const NDArrayView* msg);
};

const ::CNTK::proto::NDShape&
NDArrayView::_Internal::shape(const NDArrayView* msg) {
  return *msg->shape_;
}
const ::CNTK::proto::NDArrayView_FloatValues&
NDArrayView::_Internal::float_values(const NDArrayView* msg) {
  return *msg->values_.float_values_;
}
const ::CNTK::proto::NDArrayView_DoubleValues&
NDArrayView::_Internal::double_values(const NDArrayView* msg) {
  return *msg->values_.double_values_;
}
const ::CNTK::proto::NDArrayView_BytesValue&
NDArrayView::_Internal::bytes_value(const NDArrayView* msg) {
  return *msg->values_.bytes_value_;
}
const ::CNTK::proto::NDArrayView_IntValues&
NDArrayView::_Internal::sint32_values(const NDArrayView* msg) {
  return *msg->values_.sint32_values_;
}
void NDArrayView::set_allocated_float_values(::CNTK::proto::NDArrayView_FloatValues* float_values) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_values();
  if (float_values) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(float_values);
    if (message_arena != submessage_arena) {
      float_values = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, float_values, submessage_arena);
    }
    set_has_float_values();
    values_.float_values_ = float_values;
  }
  // @@protoc_insertion_point(field_set_allocated:CNTK.proto.NDArrayView.float_values)
}
void NDArrayView::set_allocated_double_values(::CNTK::proto::NDArrayView_DoubleValues* double_values) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_values();
  if (double_values) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(double_values);
    if (message_arena != submessage_arena) {
      double_values = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, double_values, submessage_arena);
    }
    set_has_double_values();
    values_.double_values_ = double_values;
  }
  // @@protoc_insertion_point(field_set_allocated:CNTK.proto.NDArrayView.double_values)
}
void NDArrayView::set_allocated_bytes_value(::CNTK::proto::NDArrayView_BytesValue* bytes_value) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_values();
  if (bytes_value) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(bytes_value);
    if (message_arena != submessage_arena) {
      bytes_value = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, bytes_value, submessage_arena);
    }
    set_has_bytes_value();
    values_.bytes_value_ = bytes_value;
  }
  // @@protoc_insertion_point(field_set_allocated:CNTK.proto.NDArrayView.bytes_value)
}
void NDArrayView::set_allocated_sint32_values(::CNTK::proto::NDArrayView_IntValues* sint32_values) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_values();
  if (sint32_values) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(sint32_values);
    if (message_arena != submessage_arena) {
      sint32_values = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, sint32_values, submessage_arena);
    }
    set_has_sint32_values();
    values_.sint32_values_ = sint32_values;
  }
  // @@protoc_insertion_point(field_set_allocated:CNTK.proto.NDArrayView.sint32_values)
}
NDArrayView::NDArrayView(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CNTK.proto.NDArrayView)
}
NDArrayView::NDArrayView(const NDArrayView& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_shape()) {
    shape_ = new ::CNTK::proto::NDShape(*from.shape_);
  } else {
    shape_ = nullptr;
  }
  ::memcpy(&data_type_, &from.data_type_,
    static_cast<size_t>(reinterpret_cast<char*>(&storage_format_) -
    reinterpret_cast<char*>(&data_type_)) + sizeof(storage_format_));
  clear_has_values();
  switch (from.values_case()) {
    case kFloatValues: {
      _internal_mutable_float_values()->::CNTK::proto::NDArrayView_FloatValues::MergeFrom(from._internal_float_values());
      break;
    }
    case kDoubleValues: {
      _internal_mutable_double_values()->::CNTK::proto::NDArrayView_DoubleValues::MergeFrom(from._internal_double_values());
      break;
    }
    case kBytesValue: {
      _internal_mutable_bytes_value()->::CNTK::proto::NDArrayView_BytesValue::MergeFrom(from._internal_bytes_value());
      break;
    }
    case kSint32Values: {
      _internal_mutable_sint32_values()->::CNTK::proto::NDArrayView_IntValues::MergeFrom(from._internal_sint32_values());
      break;
    }
    case VALUES_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:CNTK.proto.NDArrayView)
}

void NDArrayView::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_NDArrayView_CNTK_2eproto.base);
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&shape_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&storage_format_) -
      reinterpret_cast<char*>(&shape_)) + sizeof(storage_format_));
  clear_has_values();
}

NDArrayView::~NDArrayView() {
  // @@protoc_insertion_point(destructor:CNTK.proto.NDArrayView)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void NDArrayView::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete shape_;
  if (has_values()) {
    clear_values();
  }
}

void NDArrayView::ArenaDtor(void* object) {
  NDArrayView* _this = reinterpret_cast< NDArrayView* >(object);
  (void)_this;
}
void NDArrayView::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void NDArrayView::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const NDArrayView& NDArrayView::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_NDArrayView_CNTK_2eproto.base);
  return *internal_default_instance();
}


void NDArrayView::clear_values() {
// @@protoc_insertion_point(one_of_clear_start:CNTK.proto.NDArrayView)
  switch (values_case()) {
    case kFloatValues: {
      if (GetArena() == nullptr) {
        delete values_.float_values_;
      }
      break;
    }
    case kDoubleValues: {
      if (GetArena() == nullptr) {
        delete values_.double_values_;
      }
      break;
    }
    case kBytesValue: {
      if (GetArena() == nullptr) {
        delete values_.bytes_value_;
      }
      break;
    }
    case kSint32Values: {
      if (GetArena() == nullptr) {
        delete values_.sint32_values_;
      }
      break;
    }
    case VALUES_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = VALUES_NOT_SET;
}


void NDArrayView::Clear() {
// @@protoc_insertion_point(message_clear_start:CNTK.proto.NDArrayView)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && shape_ != nullptr) {
    delete shape_;
  }
  shape_ = nullptr;
  ::memset(&data_type_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&storage_format_) -
      reinterpret_cast<char*>(&data_type_)) + sizeof(storage_format_));
  clear_values();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* NDArrayView::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .CNTK.proto.NDArrayView.DataType data_type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_data_type(static_cast<::CNTK::proto::NDArrayView_DataType>(val));
        } else goto handle_unusual;
        continue;
      // .CNTK.proto.NDArrayView.StorageFormat storage_format = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_storage_format(static_cast<::CNTK::proto::NDArrayView_StorageFormat>(val));
        } else goto handle_unusual;
        continue;
      // .CNTK.proto.NDShape shape = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_shape(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .CNTK.proto.NDArrayView.FloatValues float_values = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_float_values(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .CNTK.proto.NDArrayView.DoubleValues double_values = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_double_values(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .CNTK.proto.NDArrayView.BytesValue bytes_value = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_bytes_value(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .CNTK.proto.NDArrayView.IntValues sint32_values = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_sint32_values(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* NDArrayView::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CNTK.proto.NDArrayView)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .CNTK.proto.NDArrayView.DataType data_type = 1;
  if (this->data_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_data_type(), target);
  }

  // .CNTK.proto.NDArrayView.StorageFormat storage_format = 2;
  if (this->storage_format() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      2, this->_internal_storage_format(), target);
  }

  // .CNTK.proto.NDShape shape = 3;
  if (this->has_shape()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::shape(this), target, stream);
  }

  // .CNTK.proto.NDArrayView.FloatValues float_values = 4;
  if (_internal_has_float_values()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::float_values(this), target, stream);
  }

  // .CNTK.proto.NDArrayView.DoubleValues double_values = 5;
  if (_internal_has_double_values()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        5, _Internal::double_values(this), target, stream);
  }

  // .CNTK.proto.NDArrayView.BytesValue bytes_value = 6;
  if (_internal_has_bytes_value()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        6, _Internal::bytes_value(this), target, stream);
  }

  // .CNTK.proto.NDArrayView.IntValues sint32_values = 7;
  if (_internal_has_sint32_values()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        7, _Internal::sint32_values(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CNTK.proto.NDArrayView)
  return target;
}

size_t NDArrayView::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CNTK.proto.NDArrayView)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .CNTK.proto.NDShape shape = 3;
  if (this->has_shape()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *shape_);
  }

  // .CNTK.proto.NDArrayView.DataType data_type = 1;
  if (this->data_type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_data_type());
  }

  // .CNTK.proto.NDArrayView.StorageFormat storage_format = 2;
  if (this->storage_format() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_storage_format());
  }

  switch (values_case()) {
    // .CNTK.proto.NDArrayView.FloatValues float_values = 4;
    case kFloatValues: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *values_.float_values_);
      break;
    }
    // .CNTK.proto.NDArrayView.DoubleValues double_values = 5;
    case kDoubleValues: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *values_.double_values_);
      break;
    }
    // .CNTK.proto.NDArrayView.BytesValue bytes_value = 6;
    case kBytesValue: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *values_.bytes_value_);
      break;
    }
    // .CNTK.proto.NDArrayView.IntValues sint32_values = 7;
    case kSint32Values: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *values_.sint32_values_);
      break;
    }
    case VALUES_NOT_SET: {
      break;
    }
  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void NDArrayView::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CNTK.proto.NDArrayView)
  GOOGLE_DCHECK_NE(&from, this);
  const NDArrayView* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<NDArrayView>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CNTK.proto.NDArrayView)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CNTK.proto.NDArrayView)
    MergeFrom(*source);
  }
}

void NDArrayView::MergeFrom(const NDArrayView& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CNTK.proto.NDArrayView)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_shape()) {
    _internal_mutable_shape()->::CNTK::proto::NDShape::MergeFrom(from._internal_shape());
  }
  if (from.data_type() != 0) {
    _internal_set_data_type(from._internal_data_type());
  }
  if (from.storage_format() != 0) {
    _internal_set_storage_format(from._internal_storage_format());
  }
  switch (from.values_case()) {
    case kFloatValues: {
      _internal_mutable_float_values()->::CNTK::proto::NDArrayView_FloatValues::MergeFrom(from._internal_float_values());
      break;
    }
    case kDoubleValues: {
      _internal_mutable_double_values()->::CNTK::proto::NDArrayView_DoubleValues::MergeFrom(from._internal_double_values());
      break;
    }
    case kBytesValue: {
      _internal_mutable_bytes_value()->::CNTK::proto::NDArrayView_BytesValue::MergeFrom(from._internal_bytes_value());
      break;
    }
    case kSint32Values: {
      _internal_mutable_sint32_values()->::CNTK::proto::NDArrayView_IntValues::MergeFrom(from._internal_sint32_values());
      break;
    }
    case VALUES_NOT_SET: {
      break;
    }
  }
}

void NDArrayView::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CNTK.proto.NDArrayView)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NDArrayView::CopyFrom(const NDArrayView& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CNTK.proto.NDArrayView)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NDArrayView::IsInitialized() const {
  return true;
}

void NDArrayView::InternalSwap(NDArrayView* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(NDArrayView, storage_format_)
      + sizeof(NDArrayView::storage_format_)
      - PROTOBUF_FIELD_OFFSET(NDArrayView, shape_)>(
          reinterpret_cast<char*>(&shape_),
          reinterpret_cast<char*>(&other->shape_));
  swap(values_, other->values_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata NDArrayView::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class Vector::_Internal {
 public:
};

Vector::Vector(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  value_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CNTK.proto.Vector)
}
Vector::Vector(const Vector& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      value_(from.value_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:CNTK.proto.Vector)
}

void Vector::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Dictionary_CNTK_2eproto.base);
}

Vector::~Vector() {
  // @@protoc_insertion_point(destructor:CNTK.proto.Vector)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Vector::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void Vector::ArenaDtor(void* object) {
  Vector* _this = reinterpret_cast< Vector* >(object);
  (void)_this;
}
void Vector::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Vector::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Vector& Vector::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Dictionary_CNTK_2eproto.base);
  return *internal_default_instance();
}


void Vector::Clear() {
// @@protoc_insertion_point(message_clear_start:CNTK.proto.Vector)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  value_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Vector::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .CNTK.proto.DictionaryValue value = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_value(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Vector::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CNTK.proto.Vector)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .CNTK.proto.DictionaryValue value = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_value_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_value(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CNTK.proto.Vector)
  return target;
}

size_t Vector::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CNTK.proto.Vector)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .CNTK.proto.DictionaryValue value = 1;
  total_size += 1UL * this->_internal_value_size();
  for (const auto& msg : this->value_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Vector::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CNTK.proto.Vector)
  GOOGLE_DCHECK_NE(&from, this);
  const Vector* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Vector>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CNTK.proto.Vector)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CNTK.proto.Vector)
    MergeFrom(*source);
  }
}

void Vector::MergeFrom(const Vector& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CNTK.proto.Vector)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  value_.MergeFrom(from.value_);
}

void Vector::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CNTK.proto.Vector)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Vector::CopyFrom(const Vector& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CNTK.proto.Vector)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Vector::IsInitialized() const {
  return true;
}

void Vector::InternalSwap(Vector* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  value_.InternalSwap(&other->value_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Vector::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

Dictionary_DataEntry_DoNotUse::Dictionary_DataEntry_DoNotUse() {}
Dictionary_DataEntry_DoNotUse::Dictionary_DataEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void Dictionary_DataEntry_DoNotUse::MergeFrom(const Dictionary_DataEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata Dictionary_DataEntry_DoNotUse::GetMetadata() const {
  return GetMetadataStatic();
}
void Dictionary_DataEntry_DoNotUse::MergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::Message& other) {
  ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom(other);
}


// ===================================================================

class Dictionary::_Internal {
 public:
};

Dictionary::Dictionary(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  data_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CNTK.proto.Dictionary)
}
Dictionary::Dictionary(const Dictionary& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  data_.MergeFrom(from.data_);
  version_ = from.version_;
  // @@protoc_insertion_point(copy_constructor:CNTK.proto.Dictionary)
}

void Dictionary::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Dictionary_CNTK_2eproto.base);
  version_ = PROTOBUF_ULONGLONG(0);
}

Dictionary::~Dictionary() {
  // @@protoc_insertion_point(destructor:CNTK.proto.Dictionary)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Dictionary::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void Dictionary::ArenaDtor(void* object) {
  Dictionary* _this = reinterpret_cast< Dictionary* >(object);
  (void)_this;
}
void Dictionary::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Dictionary::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Dictionary& Dictionary::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Dictionary_CNTK_2eproto.base);
  return *internal_default_instance();
}


void Dictionary::Clear() {
// @@protoc_insertion_point(message_clear_start:CNTK.proto.Dictionary)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  data_.Clear();
  version_ = PROTOBUF_ULONGLONG(0);
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Dictionary::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint64 version = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          version_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // map<string, .CNTK.proto.DictionaryValue> data = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&data_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Dictionary::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CNTK.proto.Dictionary)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 version = 1;
  if (this->version() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_version(), target);
  }

  // map<string, .CNTK.proto.DictionaryValue> data = 2;
  if (!this->_internal_data().empty()) {
    typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::CNTK::proto::DictionaryValue >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), static_cast<int>(p->first.length()),
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
          "CNTK.proto.Dictionary.DataEntry.key");
      }
    };

    if (stream->IsSerializationDeterministic() &&
        this->_internal_data().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->_internal_data().size()]);
      typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::CNTK::proto::DictionaryValue >::size_type size_type;
      size_type n = 0;
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, ::CNTK::proto::DictionaryValue >::const_iterator
          it = this->_internal_data().begin();
          it != this->_internal_data().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      for (size_type i = 0; i < n; i++) {
        target = Dictionary_DataEntry_DoNotUse::Funcs::InternalSerialize(2, items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second, target, stream);
        Utf8Check::Check(&(*items[static_cast<ptrdiff_t>(i)]));
      }
    } else {
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, ::CNTK::proto::DictionaryValue >::const_iterator
          it = this->_internal_data().begin();
          it != this->_internal_data().end(); ++it) {
        target = Dictionary_DataEntry_DoNotUse::Funcs::InternalSerialize(2, it->first, it->second, target, stream);
        Utf8Check::Check(&(*it));
      }
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CNTK.proto.Dictionary)
  return target;
}

size_t Dictionary::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CNTK.proto.Dictionary)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // map<string, .CNTK.proto.DictionaryValue> data = 2;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_data_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< std::string, ::CNTK::proto::DictionaryValue >::const_iterator
      it = this->_internal_data().begin();
      it != this->_internal_data().end(); ++it) {
    total_size += Dictionary_DataEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  // uint64 version = 1;
  if (this->version() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_version());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Dictionary::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CNTK.proto.Dictionary)
  GOOGLE_DCHECK_NE(&from, this);
  const Dictionary* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Dictionary>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CNTK.proto.Dictionary)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CNTK.proto.Dictionary)
    MergeFrom(*source);
  }
}

void Dictionary::MergeFrom(const Dictionary& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CNTK.proto.Dictionary)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  data_.MergeFrom(from.data_);
  if (from.version() != 0) {
    _internal_set_version(from._internal_version());
  }
}

void Dictionary::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CNTK.proto.Dictionary)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Dictionary::CopyFrom(const Dictionary& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CNTK.proto.Dictionary)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Dictionary::IsInitialized() const {
  return true;
}

void Dictionary::InternalSwap(Dictionary* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  data_.Swap(&other->data_);
  swap(version_, other->version_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Dictionary::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class DictionaryValue::_Internal {
 public:
  static const ::CNTK::proto::NDShape& nd_shape_value(const DictionaryValue* msg);
  static const ::CNTK::proto::Axis& axis_value(const DictionaryValue* msg);
  static const ::CNTK::proto::Vector& vector_value(const DictionaryValue* msg);
  static const ::CNTK::proto::Dictionary& dictionary_value(const DictionaryValue* msg);
  static const ::CNTK::proto::NDArrayView& nd_array_view_value(const DictionaryValue* msg);
};

const ::CNTK::proto::NDShape&
DictionaryValue::_Internal::nd_shape_value(const DictionaryValue* msg) {
  return *msg->value_.nd_shape_value_;
}
const ::CNTK::proto::Axis&
DictionaryValue::_Internal::axis_value(const DictionaryValue* msg) {
  return *msg->value_.axis_value_;
}
const ::CNTK::proto::Vector&
DictionaryValue::_Internal::vector_value(const DictionaryValue* msg) {
  return *msg->value_.vector_value_;
}
const ::CNTK::proto::Dictionary&
DictionaryValue::_Internal::dictionary_value(const DictionaryValue* msg) {
  return *msg->value_.dictionary_value_;
}
const ::CNTK::proto::NDArrayView&
DictionaryValue::_Internal::nd_array_view_value(const DictionaryValue* msg) {
  return *msg->value_.nd_array_view_value_;
}
void DictionaryValue::set_allocated_nd_shape_value(::CNTK::proto::NDShape* nd_shape_value) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_value();
  if (nd_shape_value) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(nd_shape_value);
    if (message_arena != submessage_arena) {
      nd_shape_value = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, nd_shape_value, submessage_arena);
    }
    set_has_nd_shape_value();
    value_.nd_shape_value_ = nd_shape_value;
  }
  // @@protoc_insertion_point(field_set_allocated:CNTK.proto.DictionaryValue.nd_shape_value)
}
void DictionaryValue::set_allocated_axis_value(::CNTK::proto::Axis* axis_value) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_value();
  if (axis_value) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(axis_value);
    if (message_arena != submessage_arena) {
      axis_value = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, axis_value, submessage_arena);
    }
    set_has_axis_value();
    value_.axis_value_ = axis_value;
  }
  // @@protoc_insertion_point(field_set_allocated:CNTK.proto.DictionaryValue.axis_value)
}
void DictionaryValue::set_allocated_vector_value(::CNTK::proto::Vector* vector_value) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_value();
  if (vector_value) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(vector_value);
    if (message_arena != submessage_arena) {
      vector_value = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, vector_value, submessage_arena);
    }
    set_has_vector_value();
    value_.vector_value_ = vector_value;
  }
  // @@protoc_insertion_point(field_set_allocated:CNTK.proto.DictionaryValue.vector_value)
}
void DictionaryValue::set_allocated_dictionary_value(::CNTK::proto::Dictionary* dictionary_value) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_value();
  if (dictionary_value) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(dictionary_value);
    if (message_arena != submessage_arena) {
      dictionary_value = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, dictionary_value, submessage_arena);
    }
    set_has_dictionary_value();
    value_.dictionary_value_ = dictionary_value;
  }
  // @@protoc_insertion_point(field_set_allocated:CNTK.proto.DictionaryValue.dictionary_value)
}
void DictionaryValue::set_allocated_nd_array_view_value(::CNTK::proto::NDArrayView* nd_array_view_value) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_value();
  if (nd_array_view_value) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(nd_array_view_value);
    if (message_arena != submessage_arena) {
      nd_array_view_value = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, nd_array_view_value, submessage_arena);
    }
    set_has_nd_array_view_value();
    value_.nd_array_view_value_ = nd_array_view_value;
  }
  // @@protoc_insertion_point(field_set_allocated:CNTK.proto.DictionaryValue.nd_array_view_value)
}
DictionaryValue::DictionaryValue(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CNTK.proto.DictionaryValue)
}
DictionaryValue::DictionaryValue(const DictionaryValue& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&version_, &from.version_,
    static_cast<size_t>(reinterpret_cast<char*>(&value_type_) -
    reinterpret_cast<char*>(&version_)) + sizeof(value_type_));
  clear_has_value();
  switch (from.value_case()) {
    case kBoolValue: {
      _internal_set_bool_value(from._internal_bool_value());
      break;
    }
    case kIntValue: {
      _internal_set_int_value(from._internal_int_value());
      break;
    }
    case kSizeTValue: {
      _internal_set_size_t_value(from._internal_size_t_value());
      break;
    }
    case kFloatValue: {
      _internal_set_float_value(from._internal_float_value());
      break;
    }
    case kDoubleValue: {
      _internal_set_double_value(from._internal_double_value());
      break;
    }
    case kStringValue: {
      _internal_set_string_value(from._internal_string_value());
      break;
    }
    case kNdShapeValue: {
      _internal_mutable_nd_shape_value()->::CNTK::proto::NDShape::MergeFrom(from._internal_nd_shape_value());
      break;
    }
    case kAxisValue: {
      _internal_mutable_axis_value()->::CNTK::proto::Axis::MergeFrom(from._internal_axis_value());
      break;
    }
    case kVectorValue: {
      _internal_mutable_vector_value()->::CNTK::proto::Vector::MergeFrom(from._internal_vector_value());
      break;
    }
    case kDictionaryValue: {
      _internal_mutable_dictionary_value()->::CNTK::proto::Dictionary::MergeFrom(from._internal_dictionary_value());
      break;
    }
    case kNdArrayViewValue: {
      _internal_mutable_nd_array_view_value()->::CNTK::proto::NDArrayView::MergeFrom(from._internal_nd_array_view_value());
      break;
    }
    case VALUE_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:CNTK.proto.DictionaryValue)
}

void DictionaryValue::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Dictionary_CNTK_2eproto.base);
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&version_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&value_type_) -
      reinterpret_cast<char*>(&version_)) + sizeof(value_type_));
  clear_has_value();
}

DictionaryValue::~DictionaryValue() {
  // @@protoc_insertion_point(destructor:CNTK.proto.DictionaryValue)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void DictionaryValue::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (has_value()) {
    clear_value();
  }
}

void DictionaryValue::ArenaDtor(void* object) {
  DictionaryValue* _this = reinterpret_cast< DictionaryValue* >(object);
  (void)_this;
}
void DictionaryValue::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void DictionaryValue::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const DictionaryValue& DictionaryValue::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Dictionary_CNTK_2eproto.base);
  return *internal_default_instance();
}


void DictionaryValue::clear_value() {
// @@protoc_insertion_point(one_of_clear_start:CNTK.proto.DictionaryValue)
  switch (value_case()) {
    case kBoolValue: {
      // No need to clear
      break;
    }
    case kIntValue: {
      // No need to clear
      break;
    }
    case kSizeTValue: {
      // No need to clear
      break;
    }
    case kFloatValue: {
      // No need to clear
      break;
    }
    case kDoubleValue: {
      // No need to clear
      break;
    }
    case kStringValue: {
      value_.string_value_.Destroy(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
      break;
    }
    case kNdShapeValue: {
      if (GetArena() == nullptr) {
        delete value_.nd_shape_value_;
      }
      break;
    }
    case kAxisValue: {
      if (GetArena() == nullptr) {
        delete value_.axis_value_;
      }
      break;
    }
    case kVectorValue: {
      if (GetArena() == nullptr) {
        delete value_.vector_value_;
      }
      break;
    }
    case kDictionaryValue: {
      if (GetArena() == nullptr) {
        delete value_.dictionary_value_;
      }
      break;
    }
    case kNdArrayViewValue: {
      if (GetArena() == nullptr) {
        delete value_.nd_array_view_value_;
      }
      break;
    }
    case VALUE_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = VALUE_NOT_SET;
}


void DictionaryValue::Clear() {
// @@protoc_insertion_point(message_clear_start:CNTK.proto.DictionaryValue)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&version_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&value_type_) -
      reinterpret_cast<char*>(&version_)) + sizeof(value_type_));
  clear_value();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DictionaryValue::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint64 version = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          version_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .CNTK.proto.DictionaryValue.Type value_type = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_value_type(static_cast<::CNTK::proto::DictionaryValue_Type>(val));
        } else goto handle_unusual;
        continue;
      // bool bool_value = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _internal_set_bool_value(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 int_value = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _internal_set_int_value(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 size_t_value = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _internal_set_size_t_value(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // float float_value = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 53)) {
          _internal_set_float_value(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr));
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // double double_value = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 57)) {
          _internal_set_double_value(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr));
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // string string_value = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          auto str = _internal_mutable_string_value();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CNTK.proto.DictionaryValue.string_value"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .CNTK.proto.NDShape nd_shape_value = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          ptr = ctx->ParseMessage(_internal_mutable_nd_shape_value(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .CNTK.proto.Axis axis_value = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          ptr = ctx->ParseMessage(_internal_mutable_axis_value(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .CNTK.proto.Vector vector_value = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 90)) {
          ptr = ctx->ParseMessage(_internal_mutable_vector_value(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .CNTK.proto.Dictionary dictionary_value = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 98)) {
          ptr = ctx->ParseMessage(_internal_mutable_dictionary_value(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .CNTK.proto.NDArrayView nd_array_view_value = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 106)) {
          ptr = ctx->ParseMessage(_internal_mutable_nd_array_view_value(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* DictionaryValue::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CNTK.proto.DictionaryValue)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 version = 1;
  if (this->version() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_version(), target);
  }

  // .CNTK.proto.DictionaryValue.Type value_type = 2;
  if (this->value_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      2, this->_internal_value_type(), target);
  }

  // bool bool_value = 3;
  if (_internal_has_bool_value()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(3, this->_internal_bool_value(), target);
  }

  // int32 int_value = 4;
  if (_internal_has_int_value()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->_internal_int_value(), target);
  }

  // uint64 size_t_value = 5;
  if (_internal_has_size_t_value()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(5, this->_internal_size_t_value(), target);
  }

  // float float_value = 6;
  if (_internal_has_float_value()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(6, this->_internal_float_value(), target);
  }

  // double double_value = 7;
  if (_internal_has_double_value()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(7, this->_internal_double_value(), target);
  }

  // string string_value = 8;
  if (_internal_has_string_value()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_string_value().data(), static_cast<int>(this->_internal_string_value().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "CNTK.proto.DictionaryValue.string_value");
    target = stream->WriteStringMaybeAliased(
        8, this->_internal_string_value(), target);
  }

  // .CNTK.proto.NDShape nd_shape_value = 9;
  if (_internal_has_nd_shape_value()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        9, _Internal::nd_shape_value(this), target, stream);
  }

  // .CNTK.proto.Axis axis_value = 10;
  if (_internal_has_axis_value()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        10, _Internal::axis_value(this), target, stream);
  }

  // .CNTK.proto.Vector vector_value = 11;
  if (_internal_has_vector_value()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        11, _Internal::vector_value(this), target, stream);
  }

  // .CNTK.proto.Dictionary dictionary_value = 12;
  if (_internal_has_dictionary_value()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        12, _Internal::dictionary_value(this), target, stream);
  }

  // .CNTK.proto.NDArrayView nd_array_view_value = 13;
  if (_internal_has_nd_array_view_value()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        13, _Internal::nd_array_view_value(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CNTK.proto.DictionaryValue)
  return target;
}

size_t DictionaryValue::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CNTK.proto.DictionaryValue)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint64 version = 1;
  if (this->version() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_version());
  }

  // .CNTK.proto.DictionaryValue.Type value_type = 2;
  if (this->value_type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_value_type());
  }

  switch (value_case()) {
    // bool bool_value = 3;
    case kBoolValue: {
      total_size += 1 + 1;
      break;
    }
    // int32 int_value = 4;
    case kIntValue: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_int_value());
      break;
    }
    // uint64 size_t_value = 5;
    case kSizeTValue: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->_internal_size_t_value());
      break;
    }
    // float float_value = 6;
    case kFloatValue: {
      total_size += 1 + 4;
      break;
    }
    // double double_value = 7;
    case kDoubleValue: {
      total_size += 1 + 8;
      break;
    }
    // string string_value = 8;
    case kStringValue: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_string_value());
      break;
    }
    // .CNTK.proto.NDShape nd_shape_value = 9;
    case kNdShapeValue: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *value_.nd_shape_value_);
      break;
    }
    // .CNTK.proto.Axis axis_value = 10;
    case kAxisValue: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *value_.axis_value_);
      break;
    }
    // .CNTK.proto.Vector vector_value = 11;
    case kVectorValue: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *value_.vector_value_);
      break;
    }
    // .CNTK.proto.Dictionary dictionary_value = 12;
    case kDictionaryValue: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *value_.dictionary_value_);
      break;
    }
    // .CNTK.proto.NDArrayView nd_array_view_value = 13;
    case kNdArrayViewValue: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *value_.nd_array_view_value_);
      break;
    }
    case VALUE_NOT_SET: {
      break;
    }
  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DictionaryValue::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CNTK.proto.DictionaryValue)
  GOOGLE_DCHECK_NE(&from, this);
  const DictionaryValue* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<DictionaryValue>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CNTK.proto.DictionaryValue)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CNTK.proto.DictionaryValue)
    MergeFrom(*source);
  }
}

void DictionaryValue::MergeFrom(const DictionaryValue& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CNTK.proto.DictionaryValue)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.version() != 0) {
    _internal_set_version(from._internal_version());
  }
  if (from.value_type() != 0) {
    _internal_set_value_type(from._internal_value_type());
  }
  switch (from.value_case()) {
    case kBoolValue: {
      _internal_set_bool_value(from._internal_bool_value());
      break;
    }
    case kIntValue: {
      _internal_set_int_value(from._internal_int_value());
      break;
    }
    case kSizeTValue: {
      _internal_set_size_t_value(from._internal_size_t_value());
      break;
    }
    case kFloatValue: {
      _internal_set_float_value(from._internal_float_value());
      break;
    }
    case kDoubleValue: {
      _internal_set_double_value(from._internal_double_value());
      break;
    }
    case kStringValue: {
      _internal_set_string_value(from._internal_string_value());
      break;
    }
    case kNdShapeValue: {
      _internal_mutable_nd_shape_value()->::CNTK::proto::NDShape::MergeFrom(from._internal_nd_shape_value());
      break;
    }
    case kAxisValue: {
      _internal_mutable_axis_value()->::CNTK::proto::Axis::MergeFrom(from._internal_axis_value());
      break;
    }
    case kVectorValue: {
      _internal_mutable_vector_value()->::CNTK::proto::Vector::MergeFrom(from._internal_vector_value());
      break;
    }
    case kDictionaryValue: {
      _internal_mutable_dictionary_value()->::CNTK::proto::Dictionary::MergeFrom(from._internal_dictionary_value());
      break;
    }
    case kNdArrayViewValue: {
      _internal_mutable_nd_array_view_value()->::CNTK::proto::NDArrayView::MergeFrom(from._internal_nd_array_view_value());
      break;
    }
    case VALUE_NOT_SET: {
      break;
    }
  }
}

void DictionaryValue::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CNTK.proto.DictionaryValue)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DictionaryValue::CopyFrom(const DictionaryValue& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CNTK.proto.DictionaryValue)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DictionaryValue::IsInitialized() const {
  return true;
}

void DictionaryValue::InternalSwap(DictionaryValue* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(DictionaryValue, value_type_)
      + sizeof(DictionaryValue::value_type_)
      - PROTOBUF_FIELD_OFFSET(DictionaryValue, version_)>(
          reinterpret_cast<char*>(&version_),
          reinterpret_cast<char*>(&other->version_));
  swap(value_, other->value_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata DictionaryValue::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace proto
}  // namespace CNTK
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::CNTK::proto::NDShape* Arena::CreateMaybeMessage< ::CNTK::proto::NDShape >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CNTK::proto::NDShape >(arena);
}
template<> PROTOBUF_NOINLINE ::CNTK::proto::Axis* Arena::CreateMaybeMessage< ::CNTK::proto::Axis >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CNTK::proto::Axis >(arena);
}
template<> PROTOBUF_NOINLINE ::CNTK::proto::NDArrayView_FloatValues* Arena::CreateMaybeMessage< ::CNTK::proto::NDArrayView_FloatValues >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CNTK::proto::NDArrayView_FloatValues >(arena);
}
template<> PROTOBUF_NOINLINE ::CNTK::proto::NDArrayView_DoubleValues* Arena::CreateMaybeMessage< ::CNTK::proto::NDArrayView_DoubleValues >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CNTK::proto::NDArrayView_DoubleValues >(arena);
}
template<> PROTOBUF_NOINLINE ::CNTK::proto::NDArrayView_BytesValue* Arena::CreateMaybeMessage< ::CNTK::proto::NDArrayView_BytesValue >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CNTK::proto::NDArrayView_BytesValue >(arena);
}
template<> PROTOBUF_NOINLINE ::CNTK::proto::NDArrayView_IntValues* Arena::CreateMaybeMessage< ::CNTK::proto::NDArrayView_IntValues >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CNTK::proto::NDArrayView_IntValues >(arena);
}
template<> PROTOBUF_NOINLINE ::CNTK::proto::NDArrayView* Arena::CreateMaybeMessage< ::CNTK::proto::NDArrayView >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CNTK::proto::NDArrayView >(arena);
}
template<> PROTOBUF_NOINLINE ::CNTK::proto::Vector* Arena::CreateMaybeMessage< ::CNTK::proto::Vector >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CNTK::proto::Vector >(arena);
}
template<> PROTOBUF_NOINLINE ::CNTK::proto::Dictionary_DataEntry_DoNotUse* Arena::CreateMaybeMessage< ::CNTK::proto::Dictionary_DataEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CNTK::proto::Dictionary_DataEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::CNTK::proto::Dictionary* Arena::CreateMaybeMessage< ::CNTK::proto::Dictionary >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CNTK::proto::Dictionary >(arena);
}
template<> PROTOBUF_NOINLINE ::CNTK::proto::DictionaryValue* Arena::CreateMaybeMessage< ::CNTK::proto::DictionaryValue >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CNTK::proto::DictionaryValue >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
